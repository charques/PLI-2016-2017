package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales

terminal Token PLUS;
terminal Token DIVIDE;

terminal Token STRING;
terminal Token INTEGER_LITERAL;

terminal Token AND;
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONST;
terminal Token DO;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token IF;
terminal Token INTEGER;
terminal Token MODULE;
terminal Token NOT;
terminal Token PROCEDURE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
terminal Token VAR;
terminal Token WHILE;
terminal Token WRITESTRING;
terminal Token WRITEINT;
terminal Token WRITELN;

terminal Token ASSIGNMENT;
terminal Token EQUAL;
terminal Token LESS_THAN;
terminal Token NOT_EQUAL;
terminal Token DOT;
terminal Token COMMA;
terminal Token COLON;
terminal Token SEMICOLON;
terminal Token LEFT_PARENTHESIS;
terminal Token RIGHT_PARENTHESIS;
terminal Token LEFT_BRACKET;
terminal Token RIGHT_BRACKET;
terminal Token IDENTIFIER;

// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal			module_header, declaration_blocks_spec, begin_spec, end_spec;
non terminal			const_spec, const_list, const_block;
non terminal			var_spec, var_list, var_block;
non terminal			type_spec, type_list, record_type, record_header, record_var_list, record_var, record_end;
non terminal			subp_spec, subp_list, proc, func, proc_header, func_header, subp_header, subp_params, param_block_list, param_block_sub_list, param_block, func_return, func_return_values, by_reference;
non terminal			stmt_spec;
non terminal			stmt_list, stmt, simple_id, assig_stmt, if_stmt, while_stmt, writestring_stmt, writeint_stmt, writeln_stmt, expr, expr_arit, expr_logic, proc_call_stmt, proc_call_expr, proc_call_params, expr_list, expr_sub_list, else_part;

non terminal			vector, vector_index;
non terminal			writestring_params, writeint_params, writeln_paren;

non terminal			ident_list, ident_sub_list, var_type, prim_types, const_value, ident_plus, ident_plus_options, property_access;

// Declaracion de relaciones de precedencia
precedence right    NOT;
precedence left     PLUS, DIVIDE, AND, LESS_THAN, NOT_EQUAL;
precedence left     DOT, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET;

// Declaracion de reglas de produccion

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aun no se tendra implementada la generacion de codigo intermedio ni final.
  		// Para la entrega de Junio deberan descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};

/* ------ */
/* module */
/* ------ */
axiom ::= module_header declaration_blocks_spec begin_spec stmt_spec end_spec;
module_header ::= MODULE IDENTIFIER SEMICOLON
	| error {: syntaxErrorManager.syntaxDebug ("Error module header declaration"); :};
declaration_blocks_spec ::= const_spec type_spec var_spec subp_spec;
begin_spec ::= BEGIN;
end_spec ::= END IDENTIFIER SEMICOLON
	| error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error module end declaration"); :};

/* --------- */
/* constants */
/* --------- */
const_spec ::= CONST const_list 
	| /* empty */;
const_list ::= const_block const_list 
	| /* empty */;
const_block ::= IDENTIFIER EQUAL const_value SEMICOLON
	| error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error const declaration"); :};

/* -------------- */
/* types - record */
/* -------------- */
type_spec ::= TYPE type_list 
	| /*empty */;
type_list ::= type_list record_type 
	| record_type;
record_type ::= record_header record_var_list record_end;
record_header ::= IDENTIFIER EQUAL RECORD
	| error {: syntaxErrorManager.syntaxDebug ("Error record header declaration"); :};
record_var_list ::= record_var_list record_var 
	| record_var;
record_var ::= IDENTIFIER COLON prim_types SEMICOLON
	| error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error record properties declaration"); :};
record_end ::= END SEMICOLON
	| error {: syntaxErrorManager.syntaxDebug ("Error record end declaration"); :};

/* ---- */
/* vars */
/* ---- */
var_spec ::= VAR var_list 
	| /* empty */;
var_list ::= var_block var_list 
	| /* empty */;
var_block ::= ident_list COLON var_type SEMICOLON
	| error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error var declaration"); :};

/* ----------- */
/* subprograms */
/* ----------- */
subp_spec ::= subp_list 
	| /* empty */;
subp_list ::= subp_list proc 
	| subp_list func 
	| proc 
	| func;
proc ::= proc_header declaration_blocks_spec begin_spec stmt_spec end_spec;
func ::= func_header declaration_blocks_spec begin_spec stmt_spec func_return end_spec;
proc_header ::= subp_header SEMICOLON;
func_header ::= subp_header COLON prim_types SEMICOLON
	| subp_header error {: syntaxErrorManager.syntaxDebug ("Error xxx"); :};
subp_header ::= PROCEDURE IDENTIFIER subp_params
	| PROCEDURE error subp_params {: syntaxErrorManager.syntaxDebug ("Error procedure header declaration"); :};
func_return ::= RETURN func_return_values SEMICOLON;
func_return_values ::= IDENTIFIER 
	| INTEGER_LITERAL
	| error {: syntaxErrorManager.syntaxDebug ("Error procedure return value"); :};
subp_params ::= LEFT_PARENTHESIS param_block_list RIGHT_PARENTHESIS 
	| /* empty */;
param_block_list ::= param_block param_block_sub_list 
	| /* empty */;
param_block_sub_list ::= SEMICOLON param_block param_block_sub_list 
	| /* empty */;
param_block ::= by_reference ident_list COLON var_type
	| error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error procedure header params declaration"); :};
by_reference ::= VAR 
	| /* empty */;

/* ---------- */
/* statements */
/* ---------- */
stmt_spec ::= stmt_list 
	| /* empty */;
stmt_list ::= stmt_list stmt 
	| stmt;
stmt ::= simple_id
	| assig_stmt  
	| proc_call_stmt
	| if_stmt
	| while_stmt
	| writestring_stmt
	| writeint_stmt
	| writeln_stmt;

simple_id ::= IDENTIFIER SEMICOLON
	| IDENTIFIER error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion no esperada."); :};
assig_stmt ::= ident_plus ASSIGNMENT expr SEMICOLON
	| ident_plus ASSIGNMENT error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion no esperada en la asignacion."); :};

if_stmt ::= IF expr THEN stmt_spec else_part END SEMICOLON
	| IF error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion erronea en sentencia IF."); :};
else_part ::= ELSE stmt_spec
	| /* empty */;
	
while_stmt ::= WHILE expr DO stmt_spec END SEMICOLON
	| WHILE error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion erronea en sentencia WHILE."); :};

writestring_stmt ::= WRITESTRING LEFT_PARENTHESIS writestring_params RIGHT_PARENTHESIS SEMICOLON
	| WRITESTRING error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion WRITESTRING erronea."); :};

writeint_stmt ::= WRITEINT LEFT_PARENTHESIS writeint_params RIGHT_PARENTHESIS SEMICOLON
	| WRITEINT error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion WRITEINT erronea."); :};
	
writeln_stmt ::= WRITELN writeln_paren SEMICOLON
	| WRITELN error SEMICOLON {: syntaxErrorManager.syntaxDebug ("Error: expresion WRITELN erronea."); :};

ident_plus ::= IDENTIFIER 
	| IDENTIFIER ident_plus_options;
ident_plus_options ::= vector 
	| property_access;
vector ::= LEFT_BRACKET vector_index RIGHT_BRACKET;
vector_index ::= ident_plus 
	| INTEGER_LITERAL
	| expr_arit
	| vector;
property_access ::= DOT IDENTIFIER 
	| DOT IDENTIFIER property_access;

proc_call_stmt ::= proc_call_expr SEMICOLON;
proc_call_expr ::= IDENTIFIER proc_call_params;
proc_call_params ::= LEFT_PARENTHESIS expr_list RIGHT_PARENTHESIS
	| LEFT_PARENTHESIS error RIGHT_PARENTHESIS {: syntaxErrorManager.syntaxDebug ("Error: procedure call mal formed."); :};

writestring_params ::= STRING 
	| ident_plus 
	| proc_call_expr;
writeint_params ::= INTEGER_LITERAL 
	| ident_plus 
	| proc_call_expr
	| expr_arit;
writeln_paren ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
	| /* empty */;

/* ---------- */
/* expresions */
/* ---------- */
expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
	| expr_arit
	| expr_logic
	| ident_plus
	| proc_call_expr
	| const_value;
	
expr_arit ::= expr PLUS expr
	| expr DIVIDE expr;
	
expr_logic ::= expr NOT_EQUAL expr
	| expr LESS_THAN expr
	| expr AND expr
	| NOT expr;

expr_list ::= expr expr_sub_list 
	| /* empty */; 
expr_sub_list ::= expr_sub_list COMMA expr 
	| /* empty */; 

/* ------ */
/* common */
/* ------ */
ident_list ::= IDENTIFIER ident_sub_list;
ident_sub_list  ::= ident_sub_list COMMA IDENTIFIER 
	| /* empty */;
var_type ::= IDENTIFIER 
	| prim_types;
prim_types ::= INTEGER 
	| BOOLEAN;
const_value ::= INTEGER_LITERAL 
	| TRUE 
	| FALSE;
	