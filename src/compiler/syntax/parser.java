
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 27 11:01:18 CET 2016
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 27 11:01:18 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\076\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\005\000\002\005\006" +
    "\000\002\006\003\000\002\007\005\000\002\010\004\000" +
    "\002\010\002\000\002\011\004\000\002\011\002\000\002" +
    "\012\006\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\021\005" +
    "\000\002\022\004\000\002\022\003\000\002\023\006\000" +
    "\002\024\004\000\002\013\004\000\002\013\002\000\002" +
    "\014\004\000\002\014\002\000\002\015\006\000\002\025" +
    "\003\000\002\025\002\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\027\007\000" +
    "\002\030\010\000\002\031\004\000\002\032\006\000\002" +
    "\033\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\003\000\002\034\005\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\036\005\000\002\036\002\000" +
    "\002\037\006\000\002\042\003\000\002\042\002\000\002" +
    "\043\003\000\002\043\002\000\002\044\004\000\002\044" +
    "\003\000\002\045\004\000\002\045\006\000\002\045\003" +
    "\000\002\045\003\000\002\045\007\000\002\045\007\000" +
    "\002\045\005\000\002\045\004\000\002\046\011\000\002" +
    "\046\005\000\002\046\005\000\002\060\004\000\002\060" +
    "\002\000\002\047\010\000\002\073\003\000\002\073\004" +
    "\000\002\074\003\000\002\074\003\000\002\061\005\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\075\004\000\002\075\005\000\002\053" +
    "\003\000\002\053\003\000\002\054\004\000\002\055\005" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\065\004\000\002\065\002\000\002\050" +
    "\005\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\004\000" +
    "\002\051\005\000\002\051\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\004\000\002\056" +
    "\004\000\002\056\002\000\002\057\005\000\002\057\002" +
    "\000\002\066\004\000\002\067\005\000\002\067\002\000" +
    "\002\070\003\000\002\070\003\000\002\071\003\000\002" +
    "\071\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\022\000\001\002\000\004\002\322\001" +
    "\002\000\004\022\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\053\320\001\002\000\014\011\ufff8\013\011\024" +
    "\ufff8\031\ufff8\032\ufff8\001\002\000\014\011\ufff6\024\ufff6" +
    "\031\ufff6\032\ufff6\053\262\001\002\000\004\011\060\001" +
    "\002\000\012\011\ufff3\024\ufff3\031\015\032\ufff3\001\002" +
    "\000\010\011\uffe9\024\uffe9\032\041\001\002\000\004\053" +
    "\017\001\002\000\004\053\026\001\002\000\004\040\023" +
    "\001\002\000\012\011\ufff1\024\ufff1\032\ufff1\053\ufff1\001" +
    "\002\000\012\011\ufff4\024\ufff4\032\ufff4\053\017\001\002" +
    "\000\012\011\ufff2\024\ufff2\032\ufff2\053\ufff2\001\002\000" +
    "\004\025\024\001\002\000\004\053\uffef\001\002\000\006" +
    "\016\uffed\053\uffed\001\002\000\004\045\034\001\002\000" +
    "\006\016\031\053\026\001\002\000\006\016\uffee\053\uffee" +
    "\001\002\000\004\046\033\001\002\000\012\011\ufff0\024" +
    "\ufff0\032\ufff0\053\ufff0\001\002\000\012\011\uffeb\024\uffeb" +
    "\032\uffeb\053\uffeb\001\002\000\006\012\037\021\035\001" +
    "\002\000\006\046\uff8e\050\uff8e\001\002\000\004\046\040" +
    "\001\002\000\006\046\uff8d\050\uff8d\001\002\000\006\016" +
    "\uffec\053\uffec\001\002\000\010\011\uffe7\024\uffe7\053\262" +
    "\001\002\000\006\011\uffe4\024\045\001\002\000\006\011" +
    "\uffe1\024\uffe1\001\002\000\004\011\ufffc\001\002\000\004" +
    "\053\252\001\002\000\014\011\ufff8\013\011\024\ufff8\031" +
    "\ufff8\032\ufff8\001\002\000\006\011\uffe0\024\uffe0\001\002" +
    "\000\006\011\uffe5\024\045\001\002\000\014\011\ufff8\013" +
    "\011\024\ufff8\031\ufff8\032\ufff8\001\002\000\006\045\054" +
    "\046\053\001\002\000\014\011\uffdd\013\uffdd\024\uffdd\031" +
    "\uffdd\032\uffdd\001\002\000\006\012\037\021\035\001\002" +
    "\000\004\046\056\001\002\000\014\011\uffdc\013\uffdc\024" +
    "\uffdc\031\uffdc\032\uffdc\001\002\000\004\011\060\001\002" +
    "\000\024\003\ufffb\016\ufffb\020\ufffb\026\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\053\ufffb\001\002\000\022\003\074" +
    "\020\072\026\uffcd\033\062\034\067\035\100\036\070\053" +
    "\075\001\002\000\020\003\112\007\131\017\110\023\114" +
    "\030\105\047\103\053\113\001\002\000\004\026\226\001" +
    "\002\000\026\003\uffc8\015\uffc8\016\uffc8\020\uffc8\026\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\053\uffc8\001\002\000" +
    "\026\003\uffcb\015\uffcb\016\uffcb\020\uffcb\026\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\053\uffcb\001\002\000\004\046" +
    "\uffb0\001\002\000\004\047\216\001\002\000\006\046\uffa5" +
    "\047\213\001\002\000\026\003\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\026\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\053\uffc7" +
    "\001\002\000\020\003\177\007\131\017\110\023\114\030" +
    "\105\047\103\053\113\001\002\000\004\046\176\001\002" +
    "\000\004\046\175\001\002\000\014\037\uffbc\043\145\046" +
    "\uffb1\047\142\051\144\001\002\000\026\003\074\015\uffce" +
    "\016\uffce\020\072\026\uffce\033\062\034\067\035\100\036" +
    "\070\053\075\001\002\000\004\037\171\001\002\000\004" +
    "\047\101\001\002\000\020\003\112\007\117\017\110\023" +
    "\114\030\105\047\103\053\113\001\002\000\004\050\167" +
    "\001\002\000\020\003\112\007\131\017\110\023\114\030" +
    "\105\047\103\053\113\001\002\000\016\004\uffa0\005\uffa0" +
    "\010\uffa0\041\uffa0\042\uffa0\050\uffa8\001\002\000\030\004" +
    "\uff8b\005\uff8b\010\uff8b\014\uff8b\027\uff8b\041\uff8b\042\uff8b" +
    "\044\uff8b\046\uff8b\050\uff8b\052\uff8b\001\002\000\030\004" +
    "\uffa2\005\uffa2\010\uffa2\014\uffa2\027\uffa2\041\uffa2\042\uffa2" +
    "\044\uffa2\046\uffa2\050\uffa2\052\uffa2\001\002\000\016\004" +
    "\uffa3\005\uffa3\010\uffa3\041\uffa3\042\uffa3\050\uffa7\001\002" +
    "\000\030\004\uff8a\005\uff8a\010\uff8a\014\uff8a\027\uff8a\041" +
    "\uff8a\042\uff8a\044\uff8a\046\uff8a\050\uff8a\052\uff8a\001\002" +
    "\000\030\004\uff9f\005\uff9f\010\uff9f\014\uff9f\027\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\046\uff9f\050\uff9f\052\uff9f\001\002" +
    "\000\004\050\164\001\002\000\036\004\uffbc\005\uffbc\010" +
    "\uffbc\014\uffbc\027\uffbc\041\uffbc\042\uffbc\043\145\044\uffbc" +
    "\046\uffbc\047\142\050\uffbc\051\144\052\uffbc\001\002\000" +
    "\020\003\112\007\131\017\110\023\114\030\105\047\103" +
    "\053\113\001\002\000\014\004\123\005\124\010\122\041" +
    "\121\042\120\001\002\000\016\004\uffa1\005\uffa1\010\uffa1" +
    "\041\uffa1\042\uffa1\050\uffa9\001\002\000\016\004\uff8c\005" +
    "\uff8c\010\uff8c\041\uff8c\042\uff8c\050\uffaa\001\002\000\020" +
    "\003\112\007\131\017\110\023\114\030\105\047\103\053" +
    "\113\001\002\000\020\003\112\007\131\017\110\023\114" +
    "\030\105\047\103\053\113\001\002\000\020\003\112\007" +
    "\131\017\110\023\114\030\105\047\103\053\113\001\002" +
    "\000\020\003\112\007\131\017\110\023\114\030\105\047" +
    "\103\053\113\001\002\000\020\003\112\007\131\017\110" +
    "\023\114\030\105\047\103\053\113\001\002\000\030\004" +
    "\uffa0\005\uffa0\010\uffa0\014\uffa0\027\uffa0\041\uffa0\042\uffa0" +
    "\044\uffa0\046\uffa0\050\uffa0\052\uffa0\001\002\000\030\004" +
    "\uffa3\005\uffa3\010\uffa3\014\uffa3\027\uffa3\041\uffa3\042\uffa3" +
    "\044\uffa3\046\uffa3\050\uffa3\052\uffa3\001\002\000\030\004" +
    "\uff9c\005\uff9c\010\122\014\uff9c\027\uff9c\041\121\042\120" +
    "\044\uff9c\046\uff9c\050\uff9c\052\uff9c\001\002\000\030\004" +
    "\uffa1\005\uffa1\010\uffa1\014\uffa1\027\uffa1\041\uffa1\042\uffa1" +
    "\044\uffa1\046\uffa1\050\uffa1\052\uffa1\001\002\000\030\004" +
    "\uff8c\005\uff8c\010\uff8c\014\uff8c\027\uff8c\041\uff8c\042\uff8c" +
    "\044\uff8c\046\uff8c\050\uff8c\052\uff8c\001\002\000\030\004" +
    "\uff9d\005\uff9d\010\122\014\uff9d\027\uff9d\041\121\042\120" +
    "\044\uff9d\046\uff9d\050\uff9d\052\uff9d\001\002\000\030\004" +
    "\uff99\005\uff99\010\uff99\014\uff99\027\uff99\041\uff99\042\uff99" +
    "\044\uff99\046\uff99\050\uff99\052\uff99\001\002\000\030\004" +
    "\uff9a\005\uff9a\010\uff9a\014\uff9a\027\uff9a\041\uff9a\042\uff9a" +
    "\044\uff9a\046\uff9a\050\uff9a\052\uff9a\001\002\000\030\004" +
    "\uff9b\005\uff9b\010\uff9b\014\uff9b\027\uff9b\041\uff9b\042\uff9b" +
    "\044\uff9b\046\uff9b\050\uff9b\052\uff9b\001\002\000\030\004" +
    "\123\005\124\010\122\014\uff98\027\uff98\041\121\042\120" +
    "\044\uff98\046\uff98\050\uff98\052\uff98\001\002\000\030\004" +
    "\uffaf\005\uffaf\010\uffaf\014\uffaf\027\uffaf\041\uffaf\042\uffaf" +
    "\044\uffaf\046\uffaf\050\uffaf\052\uffaf\001\002\000\032\004" +
    "\uffba\005\uffba\010\uffba\014\uffba\027\uffba\037\uffba\041\uffba" +
    "\042\uffba\044\uffba\046\uffba\050\uffba\052\uffba\001\002\000" +
    "\032\004\uffbb\005\uffbb\010\uffbb\014\uffbb\027\uffbb\037\uffbb" +
    "\041\uffbb\042\uffbb\044\uffbb\046\uffbb\050\uffbb\052\uffbb\001" +
    "\002\000\022\003\112\007\131\017\110\023\114\030\105" +
    "\047\103\050\uff96\053\113\001\002\000\032\004\uffb9\005" +
    "\uffb9\010\uffb9\014\uffb9\027\uffb9\037\uffb9\041\uffb9\042\uffb9" +
    "\044\uffb9\046\uffb9\050\uffb9\052\uffb9\001\002\000\022\003" +
    "\112\007\154\017\110\023\114\030\105\047\103\051\144" +
    "\053\113\001\002\000\004\053\146\001\002\000\034\004" +
    "\uffb3\005\uffb3\010\uffb3\014\uffb3\027\uffb3\037\uffb3\041\uffb3" +
    "\042\uffb3\043\145\044\uffb3\046\uffb3\050\uffb3\052\uffb3\001" +
    "\002\000\032\004\uffb2\005\uffb2\010\uffb2\014\uffb2\027\uffb2" +
    "\037\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2\050\uffb2\052" +
    "\uffb2\001\002\000\004\052\uffb4\001\002\000\004\052\155" +
    "\001\002\000\016\004\uffa3\005\uffa3\010\uffa3\041\uffa3\042" +
    "\uffa3\052\uffb5\001\002\000\016\004\uffa1\005\uffa1\010\uffa1" +
    "\041\uffa1\042\uffa1\052\uffb7\001\002\000\016\004\uff8c\005" +
    "\uff8c\010\uff8c\041\uff8c\042\uff8c\052\uffb6\001\002\000\032" +
    "\004\uffb8\005\uffb8\010\uffb8\014\uffb8\027\uffb8\037\uffb8\041" +
    "\uffb8\042\uffb8\044\uffb8\046\uffb8\050\uffb8\052\uffb8\001\002" +
    "\000\004\050\163\001\002\000\020\004\123\005\124\010" +
    "\122\041\121\042\120\044\uff94\050\uff94\001\002\000\006" +
    "\044\161\050\uff97\001\002\000\020\003\112\007\131\017" +
    "\110\023\114\030\105\047\103\053\113\001\002\000\020" +
    "\004\123\005\124\010\122\041\121\042\120\044\uff95\050" +
    "\uff95\001\002\000\030\004\uffae\005\uffae\010\uffae\014\uffae" +
    "\027\uffae\041\uffae\042\uffae\044\uffae\046\uffae\050\uffae\052" +
    "\uffae\001\002\000\030\004\uff9e\005\uff9e\010\uff9e\014\uff9e" +
    "\027\uff9e\041\uff9e\042\uff9e\044\uff9e\046\uff9e\050\uff9e\052" +
    "\uff9e\001\002\000\016\004\123\005\124\010\122\041\121" +
    "\042\120\050\166\001\002\000\030\004\uffa4\005\uffa4\010" +
    "\uffa4\014\uffa4\027\uffa4\041\uffa4\042\uffa4\044\uffa4\046\uffa4" +
    "\050\uffa4\052\uffa4\001\002\000\004\046\170\001\002\000" +
    "\026\003\uffc5\015\uffc5\016\uffc5\020\uffc5\026\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\053\uffc5\001\002\000\020\003" +
    "\112\007\131\017\110\023\114\030\105\047\103\053\113" +
    "\001\002\000\016\004\123\005\124\010\122\041\121\042" +
    "\120\046\173\001\002\000\026\003\uffc9\015\uffc9\016\uffc9" +
    "\020\uffc9\026\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\053" +
    "\uffc9\001\002\000\026\003\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\026\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\053\uffcc\001" +
    "\002\000\026\003\uffc3\015\uffc3\016\uffc3\020\uffc3\026\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\053\uffc3\001\002\000" +
    "\026\003\uffca\015\uffca\016\uffca\020\uffca\026\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\053\uffca\001\002\000\010\016" +
    "\211\027\210\050\164\001\002\000\016\004\123\005\124" +
    "\010\122\027\201\041\121\042\120\001\002\000\024\003" +
    "\074\015\uffcd\016\uffcd\020\072\033\062\034\067\035\100" +
    "\036\070\053\075\001\002\000\006\015\203\016\uffbe\001" +
    "\002\000\022\003\074\016\uffcd\020\072\033\062\034\067" +
    "\035\100\036\070\053\075\001\002\000\004\016\205\001" +
    "\002\000\004\046\206\001\002\000\026\003\uffc2\015\uffc2" +
    "\016\uffc2\020\uffc2\026\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\053\uffc2\001\002\000\004\016\uffbf\001\002\000\026" +
    "\003\uffc0\015\uffc0\016\uffc0\020\uffc0\026\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\053\uffc0\001\002\000\026\003\uffc1" +
    "\015\uffc1\016\uffc1\020\uffc1\026\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\053\uffc1\001\002\000\004\046\215\001\002" +
    "\000\004\050\214\001\002\000\004\046\uffa6\001\002\000" +
    "\026\003\uffc4\015\uffc4\016\uffc4\020\uffc4\026\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\053\uffc4\001\002\000\006\006" +
    "\217\053\113\001\002\000\004\050\uffad\001\002\000\004" +
    "\050\223\001\002\000\004\050\uffab\001\002\000\004\050" +
    "\uffac\001\002\000\004\046\224\001\002\000\026\003\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\026\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\053\uffc6\001\002\000\004\016\234\001\002" +
    "\000\006\007\227\053\231\001\002\000\004\046\uffd8\001" +
    "\002\000\004\046\232\001\002\000\004\046\uffd9\001\002" +
    "\000\004\016\uffda\001\002\000\006\011\uffde\024\uffde\001" +
    "\002\000\004\053\235\001\002\000\004\046\236\001\002" +
    "\000\010\002\ufffa\011\ufffa\024\ufffa\001\002\000\016\004" +
    "\123\005\124\010\122\014\240\041\121\042\120\001\002" +
    "\000\022\003\074\016\uffcd\020\072\033\062\034\067\035" +
    "\100\036\070\053\075\001\002\000\004\016\242\001\002" +
    "\000\004\046\243\001\002\000\026\003\uffbd\015\uffbd\016" +
    "\uffbd\020\uffbd\026\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\053\uffbd\001\002\000\006\011\uffe3\024\uffe3\001\002\000" +
    "\006\011\uffe2\024\uffe2\001\002\000\004\011\060\001\002" +
    "\000\022\003\074\016\uffcd\020\072\033\062\034\067\035" +
    "\100\036\070\053\075\001\002\000\004\016\234\001\002" +
    "\000\006\011\uffdf\024\uffdf\001\002\000\010\045\uffd6\046" +
    "\uffd6\047\253\001\002\000\010\032\256\050\uffd4\053\uffcf" +
    "\001\002\000\006\045\uffdb\046\uffdb\001\002\000\006\046" +
    "\273\050\uffd2\001\002\000\004\053\uffd0\001\002\000\004" +
    "\053\262\001\002\000\004\050\261\001\002\000\006\045" +
    "\uffd7\046\uffd7\001\002\000\010\040\uff91\044\uff91\045\uff91" +
    "\001\002\000\004\045\264\001\002\000\010\012\037\021" +
    "\035\053\266\001\002\000\006\046\uffd1\050\uffd1\001\002" +
    "\000\006\046\uff90\050\uff90\001\002\000\006\046\uff8f\050" +
    "\uff8f\001\002\000\010\040\uff93\044\271\045\uff93\001\002" +
    "\000\004\053\272\001\002\000\010\040\uff92\044\uff92\045" +
    "\uff92\001\002\000\006\032\256\053\uffcf\001\002\000\004" +
    "\050\uffd5\001\002\000\006\046\273\050\uffd2\001\002\000" +
    "\004\050\uffd3\001\002\000\006\011\uffea\024\uffea\001\002" +
    "\000\004\045\303\001\002\000\010\011\uffe7\024\uffe7\053" +
    "\262\001\002\000\006\011\uffe8\024\uffe8\001\002\000\010" +
    "\012\037\021\035\053\266\001\002\000\004\046\305\001" +
    "\002\000\010\011\uffe6\024\uffe6\053\uffe6\001\002\000\022" +
    "\003\074\016\uffcd\020\072\033\062\034\067\035\100\036" +
    "\070\053\075\001\002\000\004\016\234\001\002\000\004" +
    "\002\ufffe\001\002\000\012\011\ufff9\024\ufff9\031\ufff9\032" +
    "\ufff9\001\002\000\014\011\ufff6\024\ufff6\031\ufff6\032\ufff6" +
    "\053\262\001\002\000\004\040\314\001\002\000\010\007" +
    "\131\017\110\030\105\001\002\000\004\046\316\001\002" +
    "\000\014\011\ufff5\024\ufff5\031\ufff5\032\ufff5\053\ufff5\001" +
    "\002\000\012\011\ufff7\024\ufff7\031\ufff7\032\ufff7\001\002" +
    "\000\004\046\321\001\002\000\014\011\ufffd\013\ufffd\024" +
    "\ufffd\031\ufffd\032\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\003\076\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\010\012\001\001\000" +
    "\010\011\310\012\311\066\312\001\001\000\004\006\305" +
    "\001\001\000\004\016\013\001\001\000\004\013\041\001" +
    "\001\000\010\017\020\020\017\021\015\001\001\000\006" +
    "\022\026\023\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\021\021\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\027\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\276\015\300\066\277\001\001\000\020\025\043\026\047" +
    "\027\042\030\046\031\045\032\050\033\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\245\010\012\001\001\000\002\001\001\000\014\027" +
    "\243\030\244\031\045\032\050\033\051\001\001\000\006" +
    "\005\056\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\022\043\062\044\075\045\064\046\063\047\070\053\072" +
    "\054\065\073\076\001\001\000\016\050\236\051\125\052" +
    "\105\054\124\072\110\073\127\001\001\000\004\040\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\211\001\001\000\002" +
    "\001\001\000\016\050\177\051\125\052\105\054\124\072" +
    "\110\073\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\055\136\061\137\074\140\075\142\001\001\000" +
    "\016\045\173\046\063\047\070\053\072\054\065\073\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\050" +
    "\114\051\106\052\105\054\103\064\101\072\110\073\115" +
    "\001\001\000\002\001\001\000\016\050\164\051\125\052" +
    "\105\054\124\072\110\073\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\055\136\061\137\074\140\075\142\001\001\000\016\050" +
    "\135\051\125\052\105\054\124\072\110\073\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\050\134\051\125\052\105\054\124\072\110\073\127" +
    "\001\001\000\016\050\133\051\125\052\105\054\124\072" +
    "\110\073\127\001\001\000\016\050\132\051\125\052\105" +
    "\054\124\072\110\073\127\001\001\000\016\050\131\051" +
    "\125\052\105\054\124\072\110\073\127\001\001\000\016" +
    "\050\126\051\125\052\105\054\124\072\110\073\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\156\051\125\052\105\054\124\056\155" +
    "\072\110\073\127\001\001\000\002\001\001\000\022\050" +
    "\114\051\151\052\105\054\124\061\147\062\150\072\110" +
    "\073\152\001\001\000\002\001\001\000\004\075\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\157\001\001" +
    "\000\002\001\001\000\016\050\161\051\125\052\105\054" +
    "\124\072\110\073\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\050\171" +
    "\051\125\052\105\054\124\072\110\073\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\043\201\044\075\045\064\046\063\047\070" +
    "\053\072\054\065\073\076\001\001\000\004\060\203\001" +
    "\001\000\022\043\206\044\075\045\064\046\063\047\070" +
    "\053\072\054\065\073\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\220" +
    "\063\217\073\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\232\001\001\000\004\041" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\043\240\044\075\045\064\046\063\047\070\053" +
    "\072\054\065\073\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\246\001\001\000\022\043\247\044\075" +
    "\045\064\046\063\047\070\053\072\054\065\073\076\001" +
    "\001\000\004\007\250\001\001\000\002\001\001\000\004" +
    "\034\253\001\001\000\010\035\257\037\254\042\256\001" +
    "\001\000\002\001\001\000\004\036\273\001\001\000\002" +
    "\001\001\000\004\066\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\267\001\001\000\002\001\001" +
    "\000\006\070\264\071\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\274\042\256\001" +
    "\001\000\002\001\001\000\004\036\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\301\015\300\066\277\001\001\000\002\001\001\000\006" +
    "\070\303\071\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\043\306\044\075\045\064\046\063\047\070" +
    "\053\072\054\065\073\076\001\001\000\004\007\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\316" +
    "\012\311\066\312\001\001\000\002\001\001\000\004\072" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // const_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // const_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // const_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // prim_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // prim_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // var_type ::= prim_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // var_type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ident_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ident_sub_list ::= ident_sub_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ident_list ::= IDENTIFIER ident_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_sub_list ::= expr_sub_list COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_list ::= expr expr_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_logic ::= NOT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_logic ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_logic ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_logic ::= expr NOT_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_arit ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_arit ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Esto es un error en exp..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= const_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr_logic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // writeln_paren ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // writeln_paren ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // writeint_params ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // writeint_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // writeint_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // writeint_params ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // writestring_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // writestring_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // writestring_params ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // proc_call_params ::= LEFT_PARENTHESIS expr_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_params",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // proc_call_expr ::= IDENTIFIER proc_call_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_expr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // proc_call_stmt ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // proc_call_stmt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // property_access ::= DOT IDENTIFIER property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // property_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // vector_index ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vector_index ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vector_index ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vector_index ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vector ::= LEFT_BRACKET vector_index RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ident_plus_options ::= property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ident_plus_options ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ident_plus ::= IDENTIFIER ident_plus_options 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ident_plus ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while_stmt ::= WHILE expr DO stmt_spec END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_part ::= ELSE stmt_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_stmt ::= IF error THEN 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error en la expresión lógica de la sentencia condicional."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_stmt ::= IF error END 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Se esperaba la palabra reservada THEN.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stmt ::= IF expr THEN stmt_spec else_part END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error en la sentencia."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= WRITELN writeln_paren SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= WRITEINT LEFT_PARENTHESIS writeint_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= WRITESTRING LEFT_PARENTHESIS writestring_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= ident_plus ASSIGNMENT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= proc_call_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt_spec ::= stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // by_reference ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // by_reference ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param_block ::= by_reference ident_list COLON var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param_block_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param_block_sub_list ::= SEMICOLON param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param_block_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param_block_list ::= param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subp_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subp_params ::= LEFT_PARENTHESIS param_block_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // func_return_values ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // func_return_values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // func_return ::= RETURN func_return_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subp_header ::= PROCEDURE IDENTIFIER subp_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_header",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_header ::= subp_header COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_header",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proc_header ::= subp_header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_header",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func ::= func_header declaration_blocks_spec begin_spec stmt_spec func_return end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proc ::= proc_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subp_list ::= func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subp_list ::= proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subp_list ::= subp_list func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subp_list ::= subp_list proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subp_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subp_spec ::= subp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_block ::= ident_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_list ::= var_block var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_spec ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // record_end ::= END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // record_var ::= IDENTIFIER COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_var_list ::= record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // record_var_list ::= record_var_list record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // record_header ::= IDENTIFIER EQUAL RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_header",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_type ::= record_header record_var_list record_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_list ::= record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_list ::= type_list record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_spec ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_block ::= ident_list EQUAL const_value SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= const_block const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_spec ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_spec ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_spec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // begin_spec ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_blocks_spec ::= const_spec type_spec var_spec subp_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_blocks_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_header ::= MODULE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= module_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aun no se tendra implementada la generacion de codigo intermedio ni final.
  		// Para la entrega de Junio deberan descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

