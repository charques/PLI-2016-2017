
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 03 22:03:03 CET 2016
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 03 22:03:03 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\073\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\005\000\002\005\006" +
    "\000\002\006\003\000\002\007\005\000\002\010\004\000" +
    "\002\010\002\000\002\011\004\000\002\011\002\000\002" +
    "\012\007\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\021\005" +
    "\000\002\022\004\000\002\022\003\000\002\023\006\000" +
    "\002\024\004\000\002\013\004\000\002\013\002\000\002" +
    "\014\004\000\002\014\002\000\002\015\006\000\002\025" +
    "\003\000\002\025\002\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\027\007\000" +
    "\002\030\010\000\002\031\004\000\002\032\006\000\002" +
    "\033\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\003\000\002\034\005\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\036\005\000\002\036\002\000" +
    "\002\037\006\000\002\042\003\000\002\042\002\000\002" +
    "\043\003\000\002\043\002\000\002\044\004\000\002\044" +
    "\003\000\002\045\004\000\002\045\006\000\002\045\011" +
    "\000\002\045\010\000\002\045\007\000\002\045\007\000" +
    "\002\045\005\000\002\054\004\000\002\054\002\000\002" +
    "\067\003\000\002\067\004\000\002\070\003\000\002\070" +
    "\003\000\002\055\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\071\004\000\002\071\005\000" +
    "\002\047\003\000\002\047\003\000\002\050\004\000\002" +
    "\051\005\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\004\000\002\061\002\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\052\004" +
    "\000\002\052\002\000\002\053\005\000\002\053\002\000" +
    "\002\062\004\000\002\063\005\000\002\063\002\000\002" +
    "\064\003\000\002\064\003\000\002\065\003\000\002\065" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\072\003\000\002\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\026\000\001\002\000\004\002\307\001" +
    "\002\000\004\026\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\063\305\001\002\000\014\014\ufff8\016\011\032" +
    "\ufff8\040\ufff8\041\ufff8\001\002\000\014\014\ufff6\032\ufff6" +
    "\040\ufff6\041\ufff6\063\245\001\002\000\004\014\060\001" +
    "\002\000\012\014\ufff3\032\ufff3\040\015\041\ufff3\001\002" +
    "\000\010\014\uffe9\032\uffe9\041\041\001\002\000\004\063" +
    "\017\001\002\000\004\063\026\001\002\000\004\047\023" +
    "\001\002\000\012\014\ufff1\032\ufff1\041\ufff1\063\ufff1\001" +
    "\002\000\012\014\ufff4\032\ufff4\041\ufff4\063\017\001\002" +
    "\000\012\014\ufff2\032\ufff2\041\ufff2\063\ufff2\001\002\000" +
    "\004\033\024\001\002\000\004\063\uffef\001\002\000\006" +
    "\021\uffed\063\uffed\001\002\000\004\055\034\001\002\000" +
    "\006\021\031\063\026\001\002\000\006\021\uffee\063\uffee" +
    "\001\002\000\004\056\033\001\002\000\012\014\ufff0\032" +
    "\ufff0\041\ufff0\063\ufff0\001\002\000\012\014\uffeb\032\uffeb" +
    "\041\uffeb\063\uffeb\001\002\000\006\015\037\025\035\001" +
    "\002\000\006\056\uff98\060\uff98\001\002\000\004\056\040" +
    "\001\002\000\006\056\uff97\060\uff97\001\002\000\006\021" +
    "\uffec\063\uffec\001\002\000\010\014\uffe7\032\uffe7\063\245" +
    "\001\002\000\006\014\uffe4\032\045\001\002\000\006\014" +
    "\uffe1\032\uffe1\001\002\000\004\014\ufffc\001\002\000\004" +
    "\063\235\001\002\000\014\014\ufff8\016\011\032\ufff8\040" +
    "\ufff8\041\ufff8\001\002\000\006\014\uffe0\032\uffe0\001\002" +
    "\000\006\014\uffe5\032\045\001\002\000\014\014\ufff8\016" +
    "\011\032\ufff8\040\ufff8\041\ufff8\001\002\000\006\055\054" +
    "\056\053\001\002\000\014\014\uffdd\016\uffdd\032\uffdd\040" +
    "\uffdd\041\uffdd\001\002\000\006\015\037\025\035\001\002" +
    "\000\004\056\056\001\002\000\014\014\uffdc\016\uffdc\032" +
    "\uffdc\040\uffdc\041\uffdc\001\002\000\004\014\060\001\002" +
    "\000\022\021\ufffb\024\ufffb\034\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\063\ufffb\001\002\000\020\024\070\034\uffcd" +
    "\042\062\043\067\044\075\045\066\063\072\001\002\000" +
    "\016\011\136\022\131\027\134\037\130\057\126\063\100" +
    "\001\002\000\004\034\211\001\002\000\004\056\uffb6\001" +
    "\002\000\024\020\uffcb\021\uffcb\024\uffcb\034\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\063\uffcb\001\002\000\006\056" +
    "\uffac\057\205\001\002\000\004\057\175\001\002\000\016" +
    "\011\136\022\131\027\134\037\130\057\126\063\100\001" +
    "\002\000\004\056\164\001\002\000\014\046\uffc1\053\114" +
    "\056\uffb7\057\111\061\113\001\002\000\024\020\uffce\021" +
    "\uffce\024\070\034\uffce\042\062\043\067\044\075\045\066" +
    "\063\072\001\002\000\004\046\160\001\002\000\004\057" +
    "\076\001\002\000\006\011\077\063\100\001\002\000\004" +
    "\060\uffb0\001\002\000\034\004\uffc1\006\uffc1\012\uffc1\017" +
    "\uffc1\035\uffc1\050\uffc1\052\uffc1\053\114\054\uffc1\056\uffc1" +
    "\057\111\060\uffc1\061\113\001\002\000\004\060\104\001" +
    "\002\000\004\060\uffae\001\002\000\004\060\uffaf\001\002" +
    "\000\004\056\105\001\002\000\024\020\uffc5\021\uffc5\024" +
    "\uffc5\034\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\063\uffc5" +
    "\001\002\000\026\004\uffb5\006\uffb5\012\uffb5\017\uffb5\035" +
    "\uffb5\050\uffb5\052\uffb5\054\uffb5\056\uffb5\060\uffb5\001\002" +
    "\000\032\004\uffbf\006\uffbf\012\uffbf\017\uffbf\035\uffbf\046" +
    "\uffbf\050\uffbf\052\uffbf\054\uffbf\056\uffbf\060\uffbf\062\uffbf" +
    "\001\002\000\032\004\uffc0\006\uffc0\012\uffc0\017\uffc0\035" +
    "\uffc0\046\uffc0\050\uffc0\052\uffc0\054\uffc0\056\uffc0\060\uffc0" +
    "\062\uffc0\001\002\000\020\011\136\022\131\027\134\037" +
    "\130\057\126\060\uffa0\063\100\001\002\000\032\004\uffbe" +
    "\006\uffbe\012\uffbe\017\uffbe\035\uffbe\046\uffbe\050\uffbe\052" +
    "\uffbe\054\uffbe\056\uffbe\060\uffbe\062\uffbe\001\002\000\010" +
    "\011\121\061\113\063\122\001\002\000\004\063\115\001" +
    "\002\000\034\004\uffb9\006\uffb9\012\uffb9\017\uffb9\035\uffb9" +
    "\046\uffb9\050\uffb9\052\uffb9\053\114\054\uffb9\056\uffb9\060" +
    "\uffb9\062\uffb9\001\002\000\032\004\uffb8\006\uffb8\012\uffb8" +
    "\017\uffb8\035\uffb8\046\uffb8\050\uffb8\052\uffb8\054\uffb8\056" +
    "\uffb8\060\uffb8\062\uffb8\001\002\000\004\062\uffba\001\002" +
    "\000\004\062\124\001\002\000\004\062\uffbb\001\002\000" +
    "\010\053\114\061\113\062\uffc1\001\002\000\004\062\uffbc" +
    "\001\002\000\032\004\uffbd\006\uffbd\012\uffbd\017\uffbd\035" +
    "\uffbd\046\uffbd\050\uffbd\052\uffbd\054\uffbd\056\uffbd\060\uffbd" +
    "\062\uffbd\001\002\000\026\004\uffa3\006\uffa3\012\uffa3\017" +
    "\uffa3\035\uffa3\050\uffa3\052\uffa3\054\uffa3\056\uffa3\060\uffa3" +
    "\001\002\000\016\011\136\022\131\027\134\037\130\057" +
    "\126\063\100\001\002\000\004\060\155\001\002\000\026" +
    "\004\uff95\006\uff95\012\uff95\017\uff95\035\uff95\050\uff95\052" +
    "\uff95\054\uff95\056\uff95\060\uff95\001\002\000\026\004\uff94" +
    "\006\uff94\012\uff94\017\uff94\035\uff94\050\uff94\052\uff94\054" +
    "\uff94\056\uff94\060\uff94\001\002\000\026\004\uffa2\006\uffa2" +
    "\012\uffa2\017\uffa2\035\uffa2\050\uffa2\052\uffa2\054\uffa2\056" +
    "\uffa2\060\uffa2\001\002\000\020\004\143\006\144\012\142" +
    "\050\141\052\140\054\uff9e\060\uff9e\001\002\000\016\011" +
    "\136\022\131\027\134\037\130\057\126\063\100\001\002" +
    "\000\026\004\uffa4\006\uffa4\012\uffa4\017\uffa4\035\uffa4\050" +
    "\uffa4\052\uffa4\054\uffa4\056\uffa4\060\uffa4\001\002\000\026" +
    "\004\uff96\006\uff96\012\uff96\017\uff96\035\uff96\050\uff96\052" +
    "\uff96\054\uff96\056\uff96\060\uff96\001\002\000\026\004\143" +
    "\006\144\012\142\017\uffa5\035\uffa5\050\141\052\140\054" +
    "\uffa5\056\uffa5\060\uffa5\001\002\000\016\011\136\022\131" +
    "\027\134\037\130\057\126\063\100\001\002\000\016\011" +
    "\136\022\131\027\134\037\130\057\126\063\100\001\002" +
    "\000\016\011\136\022\131\027\134\037\130\057\126\063" +
    "\100\001\002\000\016\011\136\022\131\027\134\037\130" +
    "\057\126\063\100\001\002\000\016\011\136\022\131\027" +
    "\134\037\130\057\126\063\100\001\002\000\026\004\uffa9" +
    "\006\uffa9\012\142\017\uffa9\035\uffa9\050\141\052\140\054" +
    "\uffa9\056\uffa9\060\uffa9\001\002\000\026\004\uffaa\006\uffaa" +
    "\012\142\017\uffaa\035\uffaa\050\141\052\140\054\uffaa\056" +
    "\uffaa\060\uffaa\001\002\000\026\004\uffa6\006\uffa6\012\uffa6" +
    "\017\uffa6\035\uffa6\050\uffa6\052\uffa6\054\uffa6\056\uffa6\060" +
    "\uffa6\001\002\000\026\004\uffa7\006\uffa7\012\uffa7\017\uffa7" +
    "\035\uffa7\050\uffa7\052\uffa7\054\uffa7\056\uffa7\060\uffa7\001" +
    "\002\000\026\004\uffa8\006\uffa8\012\uffa8\017\uffa8\035\uffa8" +
    "\050\uffa8\052\uffa8\054\uffa8\056\uffa8\060\uffa8\001\002\000" +
    "\006\054\153\060\uffa1\001\002\000\016\011\136\022\131" +
    "\027\134\037\130\057\126\063\100\001\002\000\020\004" +
    "\143\006\144\012\142\050\141\052\140\054\uff9f\060\uff9f" +
    "\001\002\000\026\004\uffb4\006\uffb4\012\uffb4\017\uffb4\035" +
    "\uffb4\050\uffb4\052\uffb4\054\uffb4\056\uffb4\060\uffb4\001\002" +
    "\000\016\004\143\006\144\012\142\050\141\052\140\060" +
    "\157\001\002\000\026\004\uffab\006\uffab\012\uffab\017\uffab" +
    "\035\uffab\050\uffab\052\uffab\054\uffab\056\uffab\060\uffab\001" +
    "\002\000\016\011\136\022\131\027\134\037\130\057\126" +
    "\063\100\001\002\000\016\004\143\006\144\012\142\050" +
    "\141\052\140\056\162\001\002\000\024\020\uffc9\021\uffc9" +
    "\024\uffc9\034\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\063" +
    "\uffc9\001\002\000\024\020\uffcc\021\uffcc\024\uffcc\034\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\063\uffcc\001\002\000" +
    "\024\020\uffca\021\uffca\024\uffca\034\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\063\uffca\001\002\000\016\004\143\006" +
    "\144\012\142\035\166\050\141\052\140\001\002\000\022" +
    "\020\uffcd\021\uffcd\024\070\042\062\043\067\044\075\045" +
    "\066\063\072\001\002\000\006\020\170\021\uffc2\001\002" +
    "\000\020\021\uffcd\024\070\042\062\043\067\044\075\045" +
    "\066\063\072\001\002\000\004\021\172\001\002\000\004" +
    "\056\173\001\002\000\024\020\uffc8\021\uffc8\024\uffc8\034" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\063\uffc8\001\002" +
    "\000\004\021\uffc3\001\002\000\006\010\176\063\100\001" +
    "\002\000\004\060\uffb3\001\002\000\004\060\202\001\002" +
    "\000\004\060\uffb1\001\002\000\004\060\uffb2\001\002\000" +
    "\004\056\203\001\002\000\024\020\uffc6\021\uffc6\024\uffc6" +
    "\034\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\063\uffc6\001" +
    "\002\000\004\056\207\001\002\000\004\060\206\001\002" +
    "\000\004\056\uffad\001\002\000\024\020\uffc4\021\uffc4\024" +
    "\uffc4\034\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\063\uffc4" +
    "\001\002\000\004\021\217\001\002\000\006\011\212\063" +
    "\214\001\002\000\004\056\uffd8\001\002\000\004\056\215" +
    "\001\002\000\004\056\uffd9\001\002\000\004\021\uffda\001" +
    "\002\000\006\014\uffde\032\uffde\001\002\000\004\063\220" +
    "\001\002\000\004\056\221\001\002\000\010\002\ufffa\014" +
    "\ufffa\032\ufffa\001\002\000\016\004\143\006\144\012\142" +
    "\017\223\050\141\052\140\001\002\000\020\021\uffcd\024" +
    "\070\042\062\043\067\044\075\045\066\063\072\001\002" +
    "\000\004\021\225\001\002\000\004\056\226\001\002\000" +
    "\024\020\uffc7\021\uffc7\024\uffc7\034\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\063\uffc7\001\002\000\006\014\uffe3\032" +
    "\uffe3\001\002\000\006\014\uffe2\032\uffe2\001\002\000\004" +
    "\014\060\001\002\000\020\021\uffcd\024\070\042\062\043" +
    "\067\044\075\045\066\063\072\001\002\000\004\021\217" +
    "\001\002\000\006\014\uffdf\032\uffdf\001\002\000\010\055" +
    "\uffd6\056\uffd6\057\236\001\002\000\010\041\241\060\uffd4" +
    "\063\uffcf\001\002\000\006\055\uffdb\056\uffdb\001\002\000" +
    "\006\056\256\060\uffd2\001\002\000\004\063\uffd0\001\002" +
    "\000\004\063\245\001\002\000\004\060\244\001\002\000" +
    "\006\055\uffd7\056\uffd7\001\002\000\010\047\uff9b\054\uff9b" +
    "\055\uff9b\001\002\000\004\055\247\001\002\000\010\015" +
    "\037\025\035\063\251\001\002\000\006\056\uffd1\060\uffd1" +
    "\001\002\000\006\056\uff9a\060\uff9a\001\002\000\006\056" +
    "\uff99\060\uff99\001\002\000\010\047\uff9d\054\254\055\uff9d" +
    "\001\002\000\004\063\255\001\002\000\010\047\uff9c\054" +
    "\uff9c\055\uff9c\001\002\000\006\041\241\063\uffcf\001\002" +
    "\000\004\060\uffd5\001\002\000\006\056\256\060\uffd2\001" +
    "\002\000\004\060\uffd3\001\002\000\006\014\uffea\032\uffea" +
    "\001\002\000\004\055\266\001\002\000\010\014\uffe7\032" +
    "\uffe7\063\245\001\002\000\006\014\uffe8\032\uffe8\001\002" +
    "\000\010\015\037\025\035\063\251\001\002\000\004\056" +
    "\270\001\002\000\010\014\uffe6\032\uffe6\063\uffe6\001\002" +
    "\000\020\021\uffcd\024\070\042\062\043\067\044\075\045" +
    "\066\063\072\001\002\000\004\021\217\001\002\000\004" +
    "\002\ufffe\001\002\000\012\014\ufff9\032\ufff9\040\ufff9\041" +
    "\ufff9\001\002\000\014\014\ufff6\032\ufff6\040\ufff6\041\ufff6" +
    "\063\245\001\002\000\004\047\277\001\002\000\012\011" +
    "\uff92\022\uff92\027\300\037\uff92\001\002\000\010\011\uff93" +
    "\022\uff93\037\uff93\001\002\000\010\011\136\022\131\037" +
    "\130\001\002\000\004\056\303\001\002\000\014\014\ufff5" +
    "\032\ufff5\040\ufff5\041\ufff5\063\ufff5\001\002\000\012\014" +
    "\ufff7\032\ufff7\040\ufff7\041\ufff7\001\002\000\004\056\306" +
    "\001\002\000\014\014\ufffd\016\ufffd\032\ufffd\040\ufffd\041" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\003\073\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\010\012\001\001\000" +
    "\010\011\273\012\274\062\275\001\001\000\004\006\270" +
    "\001\001\000\004\016\013\001\001\000\004\013\041\001" +
    "\001\000\010\017\020\020\017\021\015\001\001\000\006" +
    "\022\026\023\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\021\021\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\027\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\261\015\263\062\262\001\001\000\020\025\043\026\047" +
    "\027\042\030\046\031\045\032\050\033\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\230\010\012\001\001\000\002\001\001\000\014\027" +
    "\226\030\227\031\045\032\050\033\051\001\001\000\006" +
    "\005\056\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\016\043\062\044\072\045\064\047\070\050\063\067\073" +
    "\001\001\000\012\046\221\050\124\066\131\067\134\001" +
    "\001\000\004\040\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\203\001\001\000\002\001\001\000" +
    "\012\046\164\050\124\066\131\067\134\001\001\000\002" +
    "\001\001\000\012\051\105\055\106\070\107\071\111\001" +
    "\001\000\012\045\162\047\070\050\063\067\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\101\060" +
    "\100\067\102\001\001\000\002\001\001\000\012\051\105" +
    "\055\106\070\107\071\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\046\132\050\124\052\126\066\131\067\134" +
    "\001\001\000\002\001\001\000\010\055\116\056\117\067" +
    "\122\001\001\000\002\001\001\000\004\071\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\055\106\070\107\071\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\155\050\124\066\131\067\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\151\001\001\000\012\046\136\050\124" +
    "\066\131\067\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\150\050\124\066\131" +
    "\067\134\001\001\000\012\046\147\050\124\066\131\067" +
    "\134\001\001\000\012\046\146\050\124\066\131\067\134" +
    "\001\001\000\012\046\145\050\124\066\131\067\134\001" +
    "\001\000\012\046\144\050\124\066\131\067\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\153\050\124\066\131\067\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\046\160\050\124\066\131\067\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\043\166\044\072\045" +
    "\064\047\070\050\063\067\073\001\001\000\004\054\170" +
    "\001\001\000\016\043\173\044\072\045\064\047\070\050" +
    "\063\067\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\177\057" +
    "\176\067\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\215\001\001\000" +
    "\004\041\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\043\223\044\072\045\064\047\070\050" +
    "\063\067\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\231\001\001\000\016\043\232\044\072\045\064" +
    "\047\070\050\063\067\073\001\001\000\004\007\233\001" +
    "\001\000\002\001\001\000\004\034\236\001\001\000\010" +
    "\035\242\037\237\042\241\001\001\000\002\001\001\000" +
    "\004\036\256\001\001\000\002\001\001\000\004\062\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\252\001\001\000\002\001\001\000\006\064\247\065\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\257\042\241\001\001\000\002\001\001\000" +
    "\004\036\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\264\015\263\062\262\001" +
    "\001\000\002\001\001\000\006\064\266\065\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\043\271\044" +
    "\072\045\064\047\070\050\063\067\073\001\001\000\004" +
    "\007\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\303\012\274\062\275\001\001\000\002\001\001" +
    "\000\004\072\300\001\001\000\002\001\001\000\004\066" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // not_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_part",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // not_part ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_part",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // const_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // const_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // const_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // prim_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // prim_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // var_type ::= prim_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // var_type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ident_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ident_sub_list ::= ident_sub_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ident_list ::= IDENTIFIER ident_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_sub_list ::= expr_sub_list COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_list ::= expr expr_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= const_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr NOT_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // writeln_paren ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // writeln_paren ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // writeint_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // writeint_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // writeint_params ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // writestring_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // writestring_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // writestring_params ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // proc_call_params ::= LEFT_PARENTHESIS expr_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_params",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // proc_call_expr ::= IDENTIFIER proc_call_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // proc_call_stmt ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // proc_call_stmt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // property_access ::= DOT IDENTIFIER property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // property_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vector_index ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vector_index ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vector_index ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vector ::= LEFT_BRACKET vector_index RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ident_plus_options ::= property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ident_plus_options ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ident_plus ::= IDENTIFIER ident_plus_options 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ident_plus ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // else_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_part ::= ELSE stmt_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= WRITELN writeln_paren SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= WRITEINT LEFT_PARENTHESIS writeint_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= WRITESTRING LEFT_PARENTHESIS writestring_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= WHILE expr DO stmt_spec END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= IF expr THEN stmt_spec else_part END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= ident_plus ASSIGNMENT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= proc_call_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt_spec ::= stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // by_reference ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // by_reference ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param_block ::= by_reference ident_list COLON var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param_block_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param_block_sub_list ::= SEMICOLON param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param_block_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param_block_list ::= param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subp_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subp_params ::= LEFT_PARENTHESIS param_block_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // func_return_values ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // func_return_values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // func_return ::= RETURN func_return_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subp_header ::= PROCEDURE IDENTIFIER subp_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_header",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_header ::= subp_header COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_header",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proc_header ::= subp_header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_header",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func ::= func_header declaration_blocks_spec begin_spec stmt_spec func_return end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proc ::= proc_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subp_list ::= func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subp_list ::= proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subp_list ::= subp_list func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subp_list ::= subp_list proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subp_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subp_spec ::= subp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_block ::= ident_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_list ::= var_block var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_spec ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // record_end ::= END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // record_var ::= IDENTIFIER COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_var_list ::= record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // record_var_list ::= record_var_list record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // record_header ::= IDENTIFIER EQUAL RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_header",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_type ::= record_header record_var_list record_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_list ::= record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_list ::= type_list record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_spec ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_block ::= ident_list EQUAL not_part const_value SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= const_block const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_spec ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_spec ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_spec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // begin_spec ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_blocks_spec ::= const_spec type_spec var_spec subp_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_blocks_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_header ::= MODULE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= module_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aun no se tendra implementada la generacion de codigo intermedio ni final.
  		// Para la entrega de Junio deberan descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

