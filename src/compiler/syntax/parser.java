
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 14 21:14:41 CET 2016
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 14 21:14:41 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\103\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\005\000\002\004\003" +
    "\000\002\005\006\000\002\006\003\000\002\007\005\000" +
    "\002\007\004\000\002\010\004\000\002\010\002\000\002" +
    "\011\004\000\002\011\002\000\002\012\006\000\002\012" +
    "\004\000\002\016\004\000\002\016\002\000\002\017\004" +
    "\000\002\017\003\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\004\000\002\022\003\000\002" +
    "\023\006\000\002\023\004\000\002\024\004\000\002\024" +
    "\003\000\002\013\004\000\002\013\002\000\002\014\004" +
    "\000\002\014\002\000\002\015\006\000\002\015\004\000" +
    "\002\025\003\000\002\025\002\000\002\026\004\000\002" +
    "\026\004\000\002\026\003\000\002\026\003\000\002\027" +
    "\007\000\002\030\010\000\002\031\004\000\002\032\006" +
    "\000\002\032\004\000\002\033\005\000\002\033\005\000" +
    "\002\040\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\034\005\000\002\034\002\000\002\035" +
    "\004\000\002\035\002\000\002\036\005\000\002\036\002" +
    "\000\002\037\006\000\002\037\004\000\002\042\003\000" +
    "\002\042\002\000\002\043\003\000\002\043\002\000\002" +
    "\044\004\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\004\000\002\046\005\000\002\047\006\000\002" +
    "\047\006\000\002\050\011\000\002\050\005\000\002\065" +
    "\004\000\002\065\002\000\002\051\010\000\002\051\005" +
    "\000\002\052\007\000\002\052\005\000\002\053\007\000" +
    "\002\053\005\000\002\054\005\000\002\054\005\000\002" +
    "\100\003\000\002\100\004\000\002\101\003\000\002\101" +
    "\003\000\002\066\005\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\102\004\000" +
    "\002\102\005\000\002\060\004\000\002\061\004\000\002" +
    "\062\005\000\002\062\005\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\072\004\000" +
    "\002\072\002\000\002\055\005\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\005\000\002\056\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\004\000" +
    "\002\063\004\000\002\063\002\000\002\064\005\000\002" +
    "\064\002\000\002\073\004\000\002\074\005\000\002\074" +
    "\002\000\002\075\003\000\002\075\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\003\000\022\000\001\002\000\004\002" +
    "\362\001\002\000\006\003\010\022\007\001\002\000\004" +
    "\002\uffff\001\002\000\004\053\360\001\002\000\014\011" +
    "\ufffc\013\ufffc\024\ufffc\031\ufffc\032\ufffc\001\002\000\014" +
    "\011\ufff6\013\012\024\ufff6\031\ufff6\032\ufff6\001\002\000" +
    "\016\003\347\011\ufff4\024\ufff4\031\ufff4\032\ufff4\053\352" +
    "\001\002\000\004\011\066\001\002\000\012\011\ufff0\024" +
    "\ufff0\031\016\032\ufff0\001\002\000\010\011\uffe3\024\uffe3" +
    "\032\046\001\002\000\006\003\017\053\021\001\002\000" +
    "\006\003\uffeb\053\uffeb\001\002\000\006\003\030\053\031" +
    "\001\002\000\004\040\025\001\002\000\014\003\uffee\011" +
    "\uffee\024\uffee\032\uffee\053\uffee\001\002\000\014\003\017" +
    "\011\ufff1\024\ufff1\032\ufff1\053\021\001\002\000\014\003" +
    "\uffef\011\uffef\024\uffef\032\uffef\053\uffef\001\002\000\004" +
    "\025\026\001\002\000\006\003\uffec\053\uffec\001\002\000" +
    "\010\003\uffe9\016\uffe9\053\uffe9\001\002\000\004\046\040" +
    "\001\002\000\004\045\041\001\002\000\010\003\034\016" +
    "\035\053\031\001\002\000\010\003\uffea\016\uffea\053\uffea" +
    "\001\002\000\016\003\uffe5\011\uffe5\024\uffe5\032\uffe5\046" +
    "\040\053\uffe5\001\002\000\004\046\037\001\002\000\014" +
    "\003\uffed\011\uffed\024\uffed\032\uffed\053\uffed\001\002\000" +
    "\014\003\uffe6\011\uffe6\024\uffe6\032\uffe6\053\uffe6\001\002" +
    "\000\010\003\uffe7\016\uffe7\053\uffe7\001\002\000\006\012" +
    "\044\021\042\001\002\000\006\046\uff7a\050\uff7a\001\002" +
    "\000\004\046\045\001\002\000\006\046\uff79\050\uff79\001" +
    "\002\000\010\003\uffe8\016\uffe8\053\uffe8\001\002\000\012" +
    "\003\334\011\uffe1\024\uffe1\053\315\001\002\000\006\011" +
    "\uffdd\024\052\001\002\000\004\011\ufffb\001\002\000\006" +
    "\011\uffda\024\uffda\001\002\000\006\003\302\053\303\001" +
    "\002\000\014\011\ufff6\013\012\024\ufff6\031\ufff6\032\ufff6" +
    "\001\002\000\006\011\uffde\024\052\001\002\000\006\011" +
    "\uffd9\024\uffd9\001\002\000\014\011\ufff6\013\012\024\ufff6" +
    "\031\ufff6\032\ufff6\001\002\000\010\003\061\045\062\046" +
    "\060\001\002\000\014\011\uffd6\013\uffd6\024\uffd6\031\uffd6" +
    "\032\uffd6\001\002\000\014\011\uffd4\013\uffd4\024\uffd4\031" +
    "\uffd4\032\uffd4\001\002\000\006\012\044\021\042\001\002" +
    "\000\004\046\064\001\002\000\014\011\uffd5\013\uffd5\024" +
    "\uffd5\031\uffd5\032\uffd5\001\002\000\004\011\066\001\002" +
    "\000\024\003\ufffa\016\ufffa\020\ufffa\026\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\053\ufffa\001\002\000\020\020\102" +
    "\026\uffc2\033\075\034\073\035\105\036\076\053\077\001" +
    "\002\000\026\003\uffb9\015\uffb9\016\uffb9\020\uffb9\026\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\053\uffb9\001\002\000" +
    "\004\046\273\001\002\000\026\003\uffba\015\uffba\016\uffba" +
    "\020\uffba\026\uffba\033\uffba\034\uffba\035\uffba\036\uffba\053" +
    "\uffba\001\002\000\006\003\263\047\262\001\002\000\026" +
    "\003\uffbb\015\uffbb\016\uffbb\020\uffbb\026\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\053\uffbb\001\002\000\020\003\253" +
    "\007\161\017\141\023\144\030\136\047\135\053\143\001" +
    "\002\000\010\003\247\046\uff90\047\246\001\002\000\016" +
    "\003\242\037\uffa7\043\175\046\243\047\172\051\174\001" +
    "\002\000\026\003\uffbf\015\uffbf\016\uffbf\020\uffbf\026\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\053\uffbf\001\002\000" +
    "\026\003\uffbe\015\uffbe\016\uffbe\020\uffbe\026\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\053\uffbe\001\002\000\020\003" +
    "\230\007\161\017\141\023\144\030\136\047\135\053\143" +
    "\001\002\000\026\003\uffc3\015\uffc3\016\uffc3\020\102\026" +
    "\uffc3\033\075\034\073\035\105\036\076\053\077\001\002" +
    "\000\004\037\222\001\002\000\006\003\131\047\130\001" +
    "\002\000\026\003\uffbc\015\uffbc\016\uffbc\020\uffbc\026\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\053\uffbc\001\002\000" +
    "\026\003\uffbd\015\uffbd\016\uffbd\020\uffbd\026\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\053\uffbd\001\002\000\026\003" +
    "\uffc0\015\uffc0\016\uffc0\020\uffc0\026\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\053\uffc0\001\002\000\004\026\114\001" +
    "\002\000\026\003\uffb8\015\uffb8\016\uffb8\020\uffb8\026\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\053\uffb8\001\002\000" +
    "\006\003\122\016\124\001\002\000\010\003\116\007\115" +
    "\053\120\001\002\000\004\046\uffcf\001\002\000\004\046" +
    "\uffce\001\002\000\004\046\121\001\002\000\004\046\uffd0" +
    "\001\002\000\006\003\uffd1\016\uffd1\001\002\000\004\046" +
    "\127\001\002\000\006\011\uffd7\024\uffd7\001\002\000\004" +
    "\053\125\001\002\000\004\046\126\001\002\000\010\002" +
    "\ufff9\011\ufff9\024\ufff9\001\002\000\010\002\ufff8\011\ufff8" +
    "\024\ufff8\001\002\000\016\007\147\017\141\023\144\030" +
    "\136\047\135\053\143\001\002\000\004\046\132\001\002" +
    "\000\026\003\uffaa\015\uffaa\016\uffaa\020\uffaa\026\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\053\uffaa\001\002\000\004" +
    "\050\220\001\002\000\016\004\uff8b\005\uff8b\010\uff8b\041" +
    "\uff8b\042\uff8b\050\uff93\001\002\000\016\007\161\017\141" +
    "\023\144\030\136\047\135\053\143\001\002\000\030\004" +
    "\uff77\005\uff77\010\uff77\014\uff77\027\uff77\041\uff77\042\uff77" +
    "\044\uff77\046\uff77\050\uff77\052\uff77\001\002\000\030\004" +
    "\uff8d\005\uff8d\010\uff8d\014\uff8d\027\uff8d\041\uff8d\042\uff8d" +
    "\044\uff8d\046\uff8d\050\uff8d\052\uff8d\001\002\000\016\004" +
    "\uff8e\005\uff8e\010\uff8e\041\uff8e\042\uff8e\050\uff92\001\002" +
    "\000\030\004\uff76\005\uff76\010\uff76\014\uff76\027\uff76\041" +
    "\uff76\042\uff76\044\uff76\046\uff76\050\uff76\052\uff76\001\002" +
    "\000\030\004\uff8a\005\uff8a\010\uff8a\014\uff8a\027\uff8a\041" +
    "\uff8a\042\uff8a\044\uff8a\046\uff8a\050\uff8a\052\uff8a\001\002" +
    "\000\036\004\uffa7\005\uffa7\010\uffa7\014\uffa7\027\uffa7\041" +
    "\uffa7\042\uffa7\043\175\044\uffa7\046\uffa7\047\172\050\uffa7" +
    "\051\174\052\uffa7\001\002\000\016\007\161\017\141\023" +
    "\144\030\136\047\135\053\143\001\002\000\014\004\153" +
    "\005\154\010\152\041\151\042\150\001\002\000\016\004" +
    "\uff8c\005\uff8c\010\uff8c\041\uff8c\042\uff8c\050\uff94\001\002" +
    "\000\016\004\uff78\005\uff78\010\uff78\041\uff78\042\uff78\050" +
    "\uff95\001\002\000\016\007\161\017\141\023\144\030\136" +
    "\047\135\053\143\001\002\000\016\007\161\017\141\023" +
    "\144\030\136\047\135\053\143\001\002\000\016\007\161" +
    "\017\141\023\144\030\136\047\135\053\143\001\002\000" +
    "\016\007\161\017\141\023\144\030\136\047\135\053\143" +
    "\001\002\000\016\007\161\017\141\023\144\030\136\047" +
    "\135\053\143\001\002\000\030\004\uff8b\005\uff8b\010\uff8b" +
    "\014\uff8b\027\uff8b\041\uff8b\042\uff8b\044\uff8b\046\uff8b\050" +
    "\uff8b\052\uff8b\001\002\000\030\004\uff8e\005\uff8e\010\uff8e" +
    "\014\uff8e\027\uff8e\041\uff8e\042\uff8e\044\uff8e\046\uff8e\050" +
    "\uff8e\052\uff8e\001\002\000\030\004\uff88\005\uff88\010\uff88" +
    "\014\uff88\027\uff88\041\uff88\042\uff88\044\uff88\046\uff88\050" +
    "\uff88\052\uff88\001\002\000\030\004\uff8c\005\uff8c\010\uff8c" +
    "\014\uff8c\027\uff8c\041\uff8c\042\uff8c\044\uff8c\046\uff8c\050" +
    "\uff8c\052\uff8c\001\002\000\030\004\uff78\005\uff78\010\uff78" +
    "\014\uff78\027\uff78\041\uff78\042\uff78\044\uff78\046\uff78\050" +
    "\uff78\052\uff78\001\002\000\030\004\uff89\005\uff89\010\uff89" +
    "\014\uff89\027\uff89\041\uff89\042\uff89\044\uff89\046\uff89\050" +
    "\uff89\052\uff89\001\002\000\030\004\uff85\005\uff85\010\uff85" +
    "\014\uff85\027\uff85\041\uff85\042\uff85\044\uff85\046\uff85\050" +
    "\uff85\052\uff85\001\002\000\030\004\uff86\005\uff86\010\uff86" +
    "\014\uff86\027\uff86\041\uff86\042\uff86\044\uff86\046\uff86\050" +
    "\uff86\052\uff86\001\002\000\030\004\uff87\005\uff87\010\uff87" +
    "\014\uff87\027\uff87\041\uff87\042\uff87\044\uff87\046\uff87\050" +
    "\uff87\052\uff87\001\002\000\030\004\153\005\154\010\152" +
    "\014\uff84\027\uff84\041\151\042\150\044\uff84\046\uff84\050" +
    "\uff84\052\uff84\001\002\000\032\004\uffa5\005\uffa5\010\uffa5" +
    "\014\uffa5\027\uffa5\037\uffa5\041\uffa5\042\uffa5\044\uffa5\046" +
    "\uffa5\050\uffa5\052\uffa5\001\002\000\030\004\uff9b\005\uff9b" +
    "\010\uff9b\014\uff9b\027\uff9b\041\uff9b\042\uff9b\044\uff9b\046" +
    "\uff9b\050\uff9b\052\uff9b\001\002\000\032\004\uffa6\005\uffa6" +
    "\010\uffa6\014\uffa6\027\uffa6\037\uffa6\041\uffa6\042\uffa6\044" +
    "\uffa6\046\uffa6\050\uffa6\052\uffa6\001\002\000\022\003\207" +
    "\007\161\017\141\023\144\030\136\047\135\050\uff82\053" +
    "\143\001\002\000\032\004\uffa4\005\uffa4\010\uffa4\014\uffa4" +
    "\027\uffa4\037\uffa4\041\uffa4\042\uffa4\044\uffa4\046\uffa4\050" +
    "\uffa4\052\uffa4\001\002\000\020\007\204\017\141\023\144" +
    "\030\136\047\135\051\174\053\143\001\002\000\004\053" +
    "\176\001\002\000\034\004\uff9e\005\uff9e\010\uff9e\014\uff9e" +
    "\027\uff9e\037\uff9e\041\uff9e\042\uff9e\043\175\044\uff9e\046" +
    "\uff9e\050\uff9e\052\uff9e\001\002\000\032\004\uff9d\005\uff9d" +
    "\010\uff9d\014\uff9d\027\uff9d\037\uff9d\041\uff9d\042\uff9d\044" +
    "\uff9d\046\uff9d\050\uff9d\052\uff9d\001\002\000\004\052\uff9f" +
    "\001\002\000\004\052\205\001\002\000\016\004\uff8e\005" +
    "\uff8e\010\uff8e\041\uff8e\042\uff8e\052\uffa0\001\002\000\016" +
    "\004\uff8c\005\uff8c\010\uff8c\041\uff8c\042\uff8c\052\uffa2\001" +
    "\002\000\016\004\uff78\005\uff78\010\uff78\041\uff78\042\uff78" +
    "\052\uffa1\001\002\000\032\004\uffa3\005\uffa3\010\uffa3\014" +
    "\uffa3\027\uffa3\037\uffa3\041\uffa3\042\uffa3\044\uffa3\046\uffa3" +
    "\050\uffa3\052\uffa3\001\002\000\004\050\215\001\002\000" +
    "\004\050\214\001\002\000\020\004\153\005\154\010\152" +
    "\041\151\042\150\044\uff80\050\uff80\001\002\000\006\044" +
    "\212\050\uff83\001\002\000\016\007\161\017\141\023\144" +
    "\030\136\047\135\053\143\001\002\000\020\004\153\005" +
    "\154\010\152\041\151\042\150\044\uff81\050\uff81\001\002" +
    "\000\030\004\uff99\005\uff99\010\uff99\014\uff99\027\uff99\041" +
    "\uff99\042\uff99\044\uff99\046\uff99\050\uff99\052\uff99\001\002" +
    "\000\030\004\uff9a\005\uff9a\010\uff9a\014\uff9a\027\uff9a\041" +
    "\uff9a\042\uff9a\044\uff9a\046\uff9a\050\uff9a\052\uff9a\001\002" +
    "\000\016\004\153\005\154\010\152\041\151\042\150\050" +
    "\217\001\002\000\030\004\uff8f\005\uff8f\010\uff8f\014\uff8f" +
    "\027\uff8f\041\uff8f\042\uff8f\044\uff8f\046\uff8f\050\uff8f\052" +
    "\uff8f\001\002\000\004\046\221\001\002\000\026\003\uffab" +
    "\015\uffab\016\uffab\020\uffab\026\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\053\uffab\001\002\000\020\003\223\007\161" +
    "\017\141\023\144\030\136\047\135\053\143\001\002\000" +
    "\004\046\226\001\002\000\016\004\153\005\154\010\152" +
    "\041\151\042\150\046\225\001\002\000\026\003\uffb5\015" +
    "\uffb5\016\uffb5\020\uffb5\026\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\053\uffb5\001\002\000\026\003\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\026\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\053\uffb4\001\002\000\026\003\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\026\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053\uffc1" +
    "\001\002\000\004\046\241\001\002\000\016\004\153\005" +
    "\154\010\152\027\232\041\151\042\150\001\002\000\022" +
    "\015\uffc2\016\uffc2\020\102\033\075\034\073\035\105\036" +
    "\076\053\077\001\002\000\006\015\234\016\uffb0\001\002" +
    "\000\020\016\uffc2\020\102\033\075\034\073\035\105\036" +
    "\076\053\077\001\002\000\004\016\236\001\002\000\004" +
    "\046\237\001\002\000\026\003\uffb3\015\uffb3\016\uffb3\020" +
    "\uffb3\026\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\053\uffb3" +
    "\001\002\000\004\016\uffb1\001\002\000\026\003\uffb2\015" +
    "\uffb2\016\uffb2\020\uffb2\026\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\053\uffb2\001\002\000\004\046\244\001\002\000" +
    "\026\003\uffb7\015\uffb7\016\uffb7\020\uffb7\026\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\053\uffb7\001\002\000\026\003" +
    "\uffb6\015\uffb6\016\uffb6\020\uffb6\026\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\053\uffb6\001\002\000\004\046\252\001" +
    "\002\000\004\050\251\001\002\000\004\046\250\001\002" +
    "\000\026\003\uffa8\015\uffa8\016\uffa8\020\uffa8\026\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\053\uffa8\001\002\000\004" +
    "\046\uff91\001\002\000\026\003\uffa9\015\uffa9\016\uffa9\020" +
    "\uffa9\026\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\053\uffa9" +
    "\001\002\000\004\046\261\001\002\000\016\004\153\005" +
    "\154\010\152\014\255\041\151\042\150\001\002\000\020" +
    "\016\uffc2\020\102\033\075\034\073\035\105\036\076\053" +
    "\077\001\002\000\004\016\257\001\002\000\004\046\260" +
    "\001\002\000\026\003\uffaf\015\uffaf\016\uffaf\020\uffaf\026" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\053\uffaf\001\002" +
    "\000\026\003\uffae\015\uffae\016\uffae\020\uffae\026\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\053\uffae\001\002\000\006" +
    "\006\265\053\143\001\002\000\004\046\264\001\002\000" +
    "\026\003\uffac\015\uffac\016\uffac\020\uffac\026\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\053\uffac\001\002\000\004\050" +
    "\uff98\001\002\000\004\050\271\001\002\000\004\050\uff96" +
    "\001\002\000\004\050\uff97\001\002\000\004\046\272\001" +
    "\002\000\026\003\uffad\015\uffad\016\uffad\020\uffad\026\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\053\uffad\001\002\000" +
    "\026\003\uff9c\015\uff9c\016\uff9c\020\uff9c\026\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\053\uff9c\001\002\000\006\011" +
    "\uffdc\024\uffdc\001\002\000\006\011\uffdb\024\uffdb\001\002" +
    "\000\004\011\066\001\002\000\022\003\uffc2\016\uffc2\020" +
    "\102\033\075\034\073\035\105\036\076\053\077\001\002" +
    "\000\006\003\122\016\124\001\002\000\006\011\uffd8\024" +
    "\uffd8\001\002\000\012\003\uffcc\045\uffcc\046\uffcc\047\304" +
    "\001\002\000\012\003\uffcc\045\uffcc\046\uffcc\047\304\001" +
    "\002\000\012\003\310\032\307\050\uffca\053\uffc4\001\002" +
    "\000\010\003\uffd3\045\uffd3\046\uffd3\001\002\000\006\046" +
    "\326\050\uffc8\001\002\000\004\053\uffc5\001\002\000\004" +
    "\046\325\001\002\000\004\053\315\001\002\000\004\050" +
    "\313\001\002\000\010\003\uffcd\045\uffcd\046\uffcd\001\002" +
    "\000\004\045\321\001\002\000\006\044\uff7d\045\uff7d\001" +
    "\002\000\006\044\317\045\uff7f\001\002\000\004\053\320" +
    "\001\002\000\006\044\uff7e\045\uff7e\001\002\000\010\012" +
    "\044\021\042\053\323\001\002\000\006\046\uffc7\050\uffc7" +
    "\001\002\000\006\046\uff7c\050\uff7c\001\002\000\006\046" +
    "\uff7b\050\uff7b\001\002\000\006\046\uffc6\050\uffc6\001\002" +
    "\000\010\003\310\032\307\053\uffc4\001\002\000\004\050" +
    "\uffcb\001\002\000\006\046\326\050\uffc8\001\002\000\004" +
    "\050\uffc9\001\002\000\010\003\uffd2\045\uffd2\046\uffd2\001" +
    "\002\000\006\011\uffe4\024\uffe4\001\002\000\004\046\343" +
    "\001\002\000\004\045\340\001\002\000\012\003\334\011" +
    "\uffe1\024\uffe1\053\315\001\002\000\006\011\uffe2\024\uffe2" +
    "\001\002\000\010\012\044\021\042\053\323\001\002\000" +
    "\004\046\342\001\002\000\012\003\uffe0\011\uffe0\024\uffe0" +
    "\053\uffe0\001\002\000\012\003\uffdf\011\uffdf\024\uffdf\053" +
    "\uffdf\001\002\000\022\003\uffc2\016\uffc2\020\102\033\075" +
    "\034\073\035\105\036\076\053\077\001\002\000\006\003" +
    "\122\016\124\001\002\000\004\002\ufffe\001\002\000\004" +
    "\046\357\001\002\000\012\011\ufff7\024\ufff7\031\ufff7\032" +
    "\ufff7\001\002\000\016\003\347\011\ufff4\024\ufff4\031\ufff4" +
    "\032\ufff4\053\352\001\002\000\004\040\353\001\002\000" +
    "\010\007\161\017\141\030\136\001\002\000\004\046\355" +
    "\001\002\000\016\003\ufff3\011\ufff3\024\ufff3\031\ufff3\032" +
    "\ufff3\053\ufff3\001\002\000\012\011\ufff5\024\ufff5\031\ufff5" +
    "\032\ufff5\001\002\000\016\003\ufff2\011\ufff2\024\ufff2\031" +
    "\ufff2\032\ufff2\053\ufff2\001\002\000\004\046\361\001\002" +
    "\000\014\011\ufffd\013\ufffd\024\ufffd\031\ufffd\032\ufffd\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\002\003\103\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\012\010" +
    "\013\001\001\000\006\011\347\012\350\001\001\000\004" +
    "\006\343\001\001\000\004\016\014\001\001\000\004\013" +
    "\046\001\001\000\010\017\022\020\021\021\017\001\001" +
    "\000\002\001\001\000\006\022\031\023\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\023\021\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\032\024\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\332\015\335\073\334\001\001\000" +
    "\020\025\047\026\053\027\050\030\054\031\052\032\055" +
    "\033\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\275\010\013\001\001\000\014" +
    "\027\273\030\274\031\052\032\055\033\056\001\001\000" +
    "\002\001\001\000\006\005\064\010\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\066\001\001\000\002\001\001\000\034\043\110\044" +
    "\102\045\107\046\077\047\100\050\105\051\073\052\071" +
    "\053\067\054\111\060\106\061\070\100\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\055\253\056\155\057" +
    "\136\061\154\077\141\100\157\001\001\000\004\072\244" +
    "\001\001\000\012\062\167\066\166\101\170\102\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\055\230" +
    "\056\155\057\136\061\154\077\141\100\157\001\001\000" +
    "\030\045\226\046\077\047\100\050\105\051\073\052\071" +
    "\053\067\054\111\060\106\061\070\100\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\112\001\001\000" +
    "\002\001\001\000\004\007\122\001\001\000\004\041\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\055\144\056\137" +
    "\057\136\061\133\071\132\077\141\100\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\055\215\056\155\057\136\061\154\077" +
    "\141\100\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\062\167\066\166\101\170\102\172\001\001\000\016" +
    "\055\165\056\155\057\136\061\154\077\141\100\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\055\164\056\155\057\136\061\154\077\141\100" +
    "\157\001\001\000\016\055\163\056\155\057\136\061\154" +
    "\077\141\100\157\001\001\000\016\055\162\056\155\057" +
    "\136\061\154\077\141\100\157\001\001\000\016\055\161" +
    "\056\155\057\136\061\154\077\141\100\157\001\001\000" +
    "\016\055\156\056\155\057\136\061\154\077\141\100\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\055\207\056\155\057\136\061\154\063" +
    "\205\077\141\100\157\001\001\000\002\001\001\000\022" +
    "\055\144\056\201\057\136\061\154\066\177\067\200\077" +
    "\141\100\202\001\001\000\002\001\001\000\004\102\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\210\001\001\000\002\001\001\000\016\055\212" +
    "\056\155\057\136\061\154\077\141\100\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\055\223\056\155\057\136\061\154\077\141" +
    "\100\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\043\232\044\102\045" +
    "\107\046\077\047\100\050\105\051\073\052\071\053\067" +
    "\054\111\060\106\061\070\100\103\001\001\000\004\065" +
    "\234\001\001\000\034\043\237\044\102\045\107\046\077" +
    "\047\100\050\105\051\073\052\071\053\067\054\111\060" +
    "\106\061\070\100\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\043\255\044\102\045" +
    "\107\046\077\047\100\050\105\051\073\052\071\053\067" +
    "\054\111\060\106\061\070\100\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\061\266\070\265\100\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\276\001\001\000\034\043\277\044" +
    "\102\045\107\046\077\047\100\050\105\051\073\052\071" +
    "\053\067\054\111\060\106\061\070\100\103\001\001\000" +
    "\004\007\300\001\001\000\002\001\001\000\004\034\331" +
    "\001\001\000\004\034\304\001\001\000\010\035\311\037" +
    "\305\042\310\001\001\000\002\001\001\000\004\036\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\075\321\076\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\327\042\310\001\001" +
    "\000\002\001\001\000\004\036\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\336\015\335\073\334\001" +
    "\001\000\002\001\001\000\006\075\340\076\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\043\344\044\102\045\107\046\077\047\100\050\105" +
    "\051\073\052\071\053\067\054\111\060\106\061\070\100" +
    "\103\001\001\000\004\007\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\355\012" +
    "\350\001\001\000\002\001\001\000\004\077\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // const_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // const_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // const_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // prim_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // prim_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // var_type ::= prim_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // var_type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ident_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ident_sub_list ::= ident_sub_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ident_list ::= IDENTIFIER ident_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_sub_list ::= expr_sub_list COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr_list ::= expr expr_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr_logic ::= NOT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_logic ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_logic ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_logic ::= expr NOT_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_arit ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_arit ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= const_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= expr_logic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // writeln_paren ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // writeln_paren ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // writeint_params ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // writeint_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // writeint_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // writeint_params ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // writestring_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // writestring_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // writestring_params ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // proc_call_params ::= LEFT_PARENTHESIS error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: procedure call mal formed."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_params",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // proc_call_params ::= LEFT_PARENTHESIS expr_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_params",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // proc_call_expr ::= IDENTIFIER proc_call_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_expr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // proc_call_stmt ::= proc_call_expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // property_access ::= DOT IDENTIFIER property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // property_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // vector_index ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // vector_index ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // vector_index ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // vector_index ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // vector ::= LEFT_BRACKET vector_index RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ident_plus_options ::= property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ident_plus_options ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ident_plus ::= IDENTIFIER ident_plus_options 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ident_plus ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // writeln_stmt ::= WRITELN error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion WRITELN erronea."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // writeln_stmt ::= WRITELN writeln_paren SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // writeint_stmt ::= WRITEINT error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion WRITEINT erronea."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // writeint_stmt ::= WRITEINT LEFT_PARENTHESIS writeint_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // writestring_stmt ::= WRITESTRING error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion WRITESTRING erronea."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_stmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // writestring_stmt ::= WRITESTRING LEFT_PARENTHESIS writestring_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_stmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // while_stmt ::= WHILE error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion erronea en sentencia WHILE."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while_stmt ::= WHILE expr DO stmt_spec END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else_part ::= ELSE stmt_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_stmt ::= IF error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion erronea en sentencia IF."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_stmt ::= IF expr THEN stmt_spec else_part END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assig_stmt ::= ident_plus ASSIGNMENT error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion no esperada en la asignacion."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assig_stmt ::= ident_plus ASSIGNMENT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_id ::= IDENTIFIER error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: expresion no esperada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_id",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_id ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_id",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmt ::= writeln_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmt ::= writeint_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmt ::= writestring_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= proc_call_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= assig_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= simple_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt_spec ::= stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // by_reference ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // by_reference ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_block ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error procedure header params declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param_block ::= by_reference ident_list COLON var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // param_block_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // param_block_sub_list ::= SEMICOLON param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // param_block_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // param_block_list ::= param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // subp_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // subp_params ::= LEFT_PARENTHESIS param_block_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // func_return_values ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error procedure return value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // func_return_values ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // func_return_values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // func_return ::= RETURN func_return_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // subp_header ::= PROCEDURE error subp_params 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error procedure header declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_header",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // subp_header ::= PROCEDURE IDENTIFIER subp_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_header",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // func_header ::= subp_header error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error xxx"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_header",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_header ::= subp_header COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_header",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proc_header ::= subp_header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_header",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // func ::= func_header declaration_blocks_spec begin_spec stmt_spec func_return end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proc ::= proc_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subp_list ::= func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subp_list ::= proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subp_list ::= subp_list func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subp_list ::= subp_list proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subp_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subp_spec ::= subp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_block ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error var declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_block ::= ident_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_list ::= var_block var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_spec ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // record_end ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error record end declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // record_end ::= END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // record_var ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error record properties declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // record_var ::= IDENTIFIER COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // record_var_list ::= record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // record_var_list ::= record_var_list record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // record_header ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error record header declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_header",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // record_header ::= IDENTIFIER EQUAL RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_header",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_type ::= record_header record_var_list record_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_list ::= record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_list ::= type_list record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_spec ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_block ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error const declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_block ::= IDENTIFIER EQUAL const_value SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_list ::= const_block const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_spec ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // end_spec ::= error SEMICOLON 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error module end declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_spec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // end_spec ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_spec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // begin_spec ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_blocks_spec ::= const_spec type_spec var_spec subp_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_blocks_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // module_header ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error module header declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_header ::= MODULE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= module_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aun no se tendra implementada la generacion de codigo intermedio ni final.
  		// Para la entrega de Junio deberan descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

