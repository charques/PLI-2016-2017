
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 16:51:05 CET 2016
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 16:51:05 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\076\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\005\000\002\005\006" +
    "\000\002\006\003\000\002\007\005\000\002\010\004\000" +
    "\002\010\002\000\002\011\004\000\002\011\002\000\002" +
    "\012\006\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\021\005" +
    "\000\002\022\004\000\002\022\003\000\002\023\006\000" +
    "\002\024\004\000\002\013\004\000\002\013\002\000\002" +
    "\014\004\000\002\014\002\000\002\015\006\000\002\025" +
    "\003\000\002\025\002\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\027\007\000" +
    "\002\030\010\000\002\031\004\000\002\032\006\000\002" +
    "\033\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\003\000\002\034\005\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\036\005\000\002\036\002\000" +
    "\002\037\006\000\002\042\003\000\002\042\002\000\002" +
    "\043\003\000\002\043\002\000\002\044\004\000\002\044" +
    "\003\000\002\045\004\000\002\045\006\000\002\045\003" +
    "\000\002\045\003\000\002\045\007\000\002\045\007\000" +
    "\002\045\005\000\002\046\011\000\002\046\005\000\002" +
    "\046\005\000\002\060\004\000\002\060\002\000\002\047" +
    "\010\000\002\073\003\000\002\073\004\000\002\074\003" +
    "\000\002\074\003\000\002\061\005\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\075\004\000\002\075\005\000\002\053\003\000\002\053" +
    "\003\000\002\054\004\000\002\055\005\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\065\004\000\002\065\002\000\002\050\005\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\004\000\002\051\005\000" +
    "\002\051\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\004\000\002\056\004\000\002\056" +
    "\002\000\002\057\005\000\002\057\002\000\002\066\004" +
    "\000\002\067\005\000\002\067\002\000\002\070\003\000" +
    "\002\070\003\000\002\071\003\000\002\071\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\026\000\001\002\000\004\002\320\001" +
    "\002\000\004\026\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\063\316\001\002\000\014\014\ufff8\016\011\032" +
    "\ufff8\040\ufff8\041\ufff8\001\002\000\014\014\ufff6\032\ufff6" +
    "\040\ufff6\041\ufff6\063\261\001\002\000\004\014\060\001" +
    "\002\000\012\014\ufff3\032\ufff3\040\015\041\ufff3\001\002" +
    "\000\010\014\uffe9\032\uffe9\041\041\001\002\000\004\063" +
    "\017\001\002\000\004\063\026\001\002\000\004\047\023" +
    "\001\002\000\012\014\ufff1\032\ufff1\041\ufff1\063\ufff1\001" +
    "\002\000\012\014\ufff4\032\ufff4\041\ufff4\063\017\001\002" +
    "\000\012\014\ufff2\032\ufff2\041\ufff2\063\ufff2\001\002\000" +
    "\004\033\024\001\002\000\004\063\uffef\001\002\000\006" +
    "\021\uffed\063\uffed\001\002\000\004\055\034\001\002\000" +
    "\006\021\031\063\026\001\002\000\006\021\uffee\063\uffee" +
    "\001\002\000\004\056\033\001\002\000\012\014\ufff0\032" +
    "\ufff0\041\ufff0\063\ufff0\001\002\000\012\014\uffeb\032\uffeb" +
    "\041\uffeb\063\uffeb\001\002\000\006\015\037\025\035\001" +
    "\002\000\006\056\uff8f\060\uff8f\001\002\000\004\056\040" +
    "\001\002\000\006\056\uff8e\060\uff8e\001\002\000\006\021" +
    "\uffec\063\uffec\001\002\000\010\014\uffe7\032\uffe7\063\261" +
    "\001\002\000\006\014\uffe4\032\045\001\002\000\006\014" +
    "\uffe1\032\uffe1\001\002\000\004\014\ufffc\001\002\000\004" +
    "\063\250\001\002\000\014\014\ufff8\016\011\032\ufff8\040" +
    "\ufff8\041\ufff8\001\002\000\006\014\uffe0\032\uffe0\001\002" +
    "\000\006\014\uffe5\032\045\001\002\000\014\014\ufff8\016" +
    "\011\032\ufff8\040\ufff8\041\ufff8\001\002\000\006\055\054" +
    "\056\053\001\002\000\014\014\uffdd\016\uffdd\032\uffdd\040" +
    "\uffdd\041\uffdd\001\002\000\006\015\037\025\035\001\002" +
    "\000\004\056\056\001\002\000\014\014\uffdc\016\uffdc\032" +
    "\uffdc\040\uffdc\041\uffdc\001\002\000\004\014\060\001\002" +
    "\000\022\021\ufffb\024\ufffb\034\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\063\ufffb\001\002\000\020\024\072\034\uffcd" +
    "\042\062\043\067\044\077\045\070\063\074\001\002\000" +
    "\020\003\111\011\123\022\106\027\114\037\104\057\103" +
    "\063\112\001\002\000\004\034\224\001\002\000\024\020" +
    "\uffc8\021\uffc8\024\uffc8\034\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\063\uffc8\001\002\000\024\020\uffcb\021\uffcb\024" +
    "\uffcb\034\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\063\uffcb" +
    "\001\002\000\004\056\uffb1\001\002\000\004\057\214\001" +
    "\002\000\006\056\uffa6\057\211\001\002\000\024\020\uffc7" +
    "\021\uffc7\024\uffc7\034\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\063\uffc7\001\002\000\020\003\175\011\123\022\106" +
    "\027\114\037\104\057\103\063\112\001\002\000\004\056" +
    "\174\001\002\000\014\046\uffbd\053\144\056\uffb2\057\141" +
    "\061\143\001\002\000\024\020\uffce\021\uffce\024\072\034" +
    "\uffce\042\062\043\067\044\077\045\070\063\074\001\002" +
    "\000\004\046\170\001\002\000\004\057\100\001\002\000" +
    "\020\003\111\011\116\022\106\027\114\037\104\057\103" +
    "\063\112\001\002\000\004\060\166\001\002\000\016\004" +
    "\uffa1\006\uffa1\012\uffa1\050\uffa1\052\uffa1\060\uffa9\001\002" +
    "\000\020\003\111\011\123\022\106\027\114\037\104\057" +
    "\103\063\112\001\002\000\030\004\uff8c\006\uff8c\012\uff8c" +
    "\017\uff8c\035\uff8c\050\uff8c\052\uff8c\054\uff8c\056\uff8c\060" +
    "\uff8c\062\uff8c\001\002\000\030\004\uffa3\006\uffa3\012\uffa3" +
    "\017\uffa3\035\uffa3\050\uffa3\052\uffa3\054\uffa3\056\uffa3\060" +
    "\uffa3\062\uffa3\001\002\000\030\004\uff8b\006\uff8b\012\uff8b" +
    "\017\uff8b\035\uff8b\050\uff8b\052\uff8b\054\uff8b\056\uff8b\060" +
    "\uff8b\062\uff8b\001\002\000\016\004\uffa4\006\uffa4\012\uffa4" +
    "\050\uffa4\052\uffa4\060\uffa8\001\002\000\030\004\uffa0\006" +
    "\uffa0\012\uffa0\017\uffa0\035\uffa0\050\uffa0\052\uffa0\054\uffa0" +
    "\056\uffa0\060\uffa0\062\uffa0\001\002\000\004\060\163\001" +
    "\002\000\036\004\uffbd\006\uffbd\012\uffbd\017\uffbd\035\uffbd" +
    "\050\uffbd\052\uffbd\053\144\054\uffbd\056\uffbd\057\141\060" +
    "\uffbd\061\143\062\uffbd\001\002\000\014\004\127\006\130" +
    "\012\126\050\125\052\124\001\002\000\020\003\111\011" +
    "\123\022\106\027\114\037\104\057\103\063\112\001\002" +
    "\000\016\004\uffa2\006\uffa2\012\uffa2\050\uffa2\052\uffa2\060" +
    "\uffaa\001\002\000\016\004\uff8d\006\uff8d\012\uff8d\050\uff8d" +
    "\052\uff8d\060\uffab\001\002\000\030\004\uffa1\006\uffa1\012" +
    "\uffa1\017\uffa1\035\uffa1\050\uffa1\052\uffa1\054\uffa1\056\uffa1" +
    "\060\uffa1\062\uffa1\001\002\000\030\004\uffa4\006\uffa4\012" +
    "\uffa4\017\uffa4\035\uffa4\050\uffa4\052\uffa4\054\uffa4\056\uffa4" +
    "\060\uffa4\062\uffa4\001\002\000\030\004\127\006\130\012" +
    "\126\017\uff99\035\uff99\050\125\052\124\054\uff99\056\uff99" +
    "\060\uff99\062\uff99\001\002\000\030\004\uffa2\006\uffa2\012" +
    "\uffa2\017\uffa2\035\uffa2\050\uffa2\052\uffa2\054\uffa2\056\uffa2" +
    "\060\uffa2\062\uffa2\001\002\000\030\004\uff8d\006\uff8d\012" +
    "\uff8d\017\uff8d\035\uff8d\050\uff8d\052\uff8d\054\uff8d\056\uff8d" +
    "\060\uff8d\062\uff8d\001\002\000\020\003\111\011\123\022" +
    "\106\027\114\037\104\057\103\063\112\001\002\000\020" +
    "\003\111\011\123\022\106\027\114\037\104\057\103\063" +
    "\112\001\002\000\020\003\111\011\123\022\106\027\114" +
    "\037\104\057\103\063\112\001\002\000\020\003\111\011" +
    "\123\022\106\027\114\037\104\057\103\063\112\001\002" +
    "\000\020\003\111\011\123\022\106\027\114\037\104\057" +
    "\103\063\112\001\002\000\030\004\uff9d\006\uff9d\012\126" +
    "\017\uff9d\035\uff9d\050\125\052\124\054\uff9d\056\uff9d\060" +
    "\uff9d\062\uff9d\001\002\000\030\004\uff9e\006\uff9e\012\126" +
    "\017\uff9e\035\uff9e\050\125\052\124\054\uff9e\056\uff9e\060" +
    "\uff9e\062\uff9e\001\002\000\030\004\uff9a\006\uff9a\012\uff9a" +
    "\017\uff9a\035\uff9a\050\uff9a\052\uff9a\054\uff9a\056\uff9a\060" +
    "\uff9a\062\uff9a\001\002\000\030\004\uff9b\006\uff9b\012\uff9b" +
    "\017\uff9b\035\uff9b\050\uff9b\052\uff9b\054\uff9b\056\uff9b\060" +
    "\uff9b\062\uff9b\001\002\000\030\004\uff9c\006\uff9c\012\uff9c" +
    "\017\uff9c\035\uff9c\050\uff9c\052\uff9c\054\uff9c\056\uff9c\060" +
    "\uff9c\062\uff9c\001\002\000\030\004\uffb0\006\uffb0\012\uffb0" +
    "\017\uffb0\035\uffb0\050\uffb0\052\uffb0\054\uffb0\056\uffb0\060" +
    "\uffb0\062\uffb0\001\002\000\032\004\uffbb\006\uffbb\012\uffbb" +
    "\017\uffbb\035\uffbb\046\uffbb\050\uffbb\052\uffbb\054\uffbb\056" +
    "\uffbb\060\uffbb\062\uffbb\001\002\000\032\004\uffbc\006\uffbc" +
    "\012\uffbc\017\uffbc\035\uffbc\046\uffbc\050\uffbc\052\uffbc\054" +
    "\uffbc\056\uffbc\060\uffbc\062\uffbc\001\002\000\022\003\111" +
    "\011\123\022\106\027\114\037\104\057\103\060\uff97\063" +
    "\112\001\002\000\032\004\uffba\006\uffba\012\uffba\017\uffba" +
    "\035\uffba\046\uffba\050\uffba\052\uffba\054\uffba\056\uffba\060" +
    "\uffba\062\uffba\001\002\000\022\003\111\011\153\022\106" +
    "\027\114\037\104\057\103\061\143\063\112\001\002\000" +
    "\004\063\145\001\002\000\034\004\uffb4\006\uffb4\012\uffb4" +
    "\017\uffb4\035\uffb4\046\uffb4\050\uffb4\052\uffb4\053\144\054" +
    "\uffb4\056\uffb4\060\uffb4\062\uffb4\001\002\000\032\004\uffb3" +
    "\006\uffb3\012\uffb3\017\uffb3\035\uffb3\046\uffb3\050\uffb3\052" +
    "\uffb3\054\uffb3\056\uffb3\060\uffb3\062\uffb3\001\002\000\004" +
    "\062\uffb5\001\002\000\004\062\154\001\002\000\016\004" +
    "\uffa4\006\uffa4\012\uffa4\050\uffa4\052\uffa4\062\uffb6\001\002" +
    "\000\016\004\uffa2\006\uffa2\012\uffa2\050\uffa2\052\uffa2\062" +
    "\uffb8\001\002\000\016\004\uff8d\006\uff8d\012\uff8d\050\uff8d" +
    "\052\uff8d\062\uffb7\001\002\000\032\004\uffb9\006\uffb9\012" +
    "\uffb9\017\uffb9\035\uffb9\046\uffb9\050\uffb9\052\uffb9\054\uffb9" +
    "\056\uffb9\060\uffb9\062\uffb9\001\002\000\004\060\162\001" +
    "\002\000\020\004\127\006\130\012\126\050\125\052\124" +
    "\054\uff95\060\uff95\001\002\000\006\054\160\060\uff98\001" +
    "\002\000\020\003\111\011\123\022\106\027\114\037\104" +
    "\057\103\063\112\001\002\000\020\004\127\006\130\012" +
    "\126\050\125\052\124\054\uff96\060\uff96\001\002\000\030" +
    "\004\uffaf\006\uffaf\012\uffaf\017\uffaf\035\uffaf\050\uffaf\052" +
    "\uffaf\054\uffaf\056\uffaf\060\uffaf\062\uffaf\001\002\000\030" +
    "\004\uff9f\006\uff9f\012\uff9f\017\uff9f\035\uff9f\050\uff9f\052" +
    "\uff9f\054\uff9f\056\uff9f\060\uff9f\062\uff9f\001\002\000\016" +
    "\004\127\006\130\012\126\050\125\052\124\060\165\001" +
    "\002\000\030\004\uffa5\006\uffa5\012\uffa5\017\uffa5\035\uffa5" +
    "\050\uffa5\052\uffa5\054\uffa5\056\uffa5\060\uffa5\062\uffa5\001" +
    "\002\000\004\056\167\001\002\000\024\020\uffc5\021\uffc5" +
    "\024\uffc5\034\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\063" +
    "\uffc5\001\002\000\020\003\111\011\123\022\106\027\114" +
    "\037\104\057\103\063\112\001\002\000\016\004\127\006" +
    "\130\012\126\050\125\052\124\056\172\001\002\000\024" +
    "\020\uffc9\021\uffc9\024\uffc9\034\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\063\uffc9\001\002\000\024\020\uffcc\021\uffcc" +
    "\024\uffcc\034\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\063" +
    "\uffcc\001\002\000\024\020\uffca\021\uffca\024\uffca\034\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\063\uffca\001\002\000" +
    "\010\021\207\035\206\060\163\001\002\000\016\004\127" +
    "\006\130\012\126\035\177\050\125\052\124\001\002\000" +
    "\022\020\uffcd\021\uffcd\024\072\042\062\043\067\044\077" +
    "\045\070\063\074\001\002\000\006\020\201\021\uffbf\001" +
    "\002\000\020\021\uffcd\024\072\042\062\043\067\044\077" +
    "\045\070\063\074\001\002\000\004\021\203\001\002\000" +
    "\004\056\204\001\002\000\024\020\uffc3\021\uffc3\024\uffc3" +
    "\034\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\063\uffc3\001" +
    "\002\000\004\021\uffc0\001\002\000\024\020\uffc1\021\uffc1" +
    "\024\uffc1\034\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\063" +
    "\uffc1\001\002\000\024\020\uffc2\021\uffc2\024\uffc2\034\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\063\uffc2\001\002\000" +
    "\004\056\213\001\002\000\004\060\212\001\002\000\004" +
    "\056\uffa7\001\002\000\024\020\uffc4\021\uffc4\024\uffc4\034" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\063\uffc4\001\002" +
    "\000\006\010\215\063\112\001\002\000\004\060\uffae\001" +
    "\002\000\004\060\221\001\002\000\004\060\uffac\001\002" +
    "\000\004\060\uffad\001\002\000\004\056\222\001\002\000" +
    "\024\020\uffc6\021\uffc6\024\uffc6\034\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\063\uffc6\001\002\000\004\021\232\001" +
    "\002\000\006\011\225\063\227\001\002\000\004\056\uffd8" +
    "\001\002\000\004\056\230\001\002\000\004\056\uffd9\001" +
    "\002\000\004\021\uffda\001\002\000\006\014\uffde\032\uffde" +
    "\001\002\000\004\063\233\001\002\000\004\056\234\001" +
    "\002\000\010\002\ufffa\014\ufffa\032\ufffa\001\002\000\016" +
    "\004\127\006\130\012\126\017\236\050\125\052\124\001" +
    "\002\000\020\021\uffcd\024\072\042\062\043\067\044\077" +
    "\045\070\063\074\001\002\000\004\021\240\001\002\000" +
    "\004\056\241\001\002\000\024\020\uffbe\021\uffbe\024\uffbe" +
    "\034\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\063\uffbe\001" +
    "\002\000\006\014\uffe3\032\uffe3\001\002\000\006\014\uffe2" +
    "\032\uffe2\001\002\000\004\014\060\001\002\000\020\021" +
    "\uffcd\024\072\042\062\043\067\044\077\045\070\063\074" +
    "\001\002\000\004\021\232\001\002\000\006\014\uffdf\032" +
    "\uffdf\001\002\000\010\055\uffd6\056\uffd6\057\251\001\002" +
    "\000\010\041\254\060\uffd4\063\uffcf\001\002\000\006\055" +
    "\uffdb\056\uffdb\001\002\000\006\056\271\060\uffd2\001\002" +
    "\000\004\063\uffd0\001\002\000\004\063\261\001\002\000" +
    "\004\060\257\001\002\000\006\055\uffd7\056\uffd7\001\002" +
    "\000\004\055\265\001\002\000\010\047\uff92\054\uff92\055" +
    "\uff92\001\002\000\010\047\uff94\054\263\055\uff94\001\002" +
    "\000\004\063\264\001\002\000\010\047\uff93\054\uff93\055" +
    "\uff93\001\002\000\010\015\037\025\035\063\270\001\002" +
    "\000\006\056\uffd1\060\uffd1\001\002\000\006\056\uff90\060" +
    "\uff90\001\002\000\006\056\uff91\060\uff91\001\002\000\006" +
    "\041\254\063\uffcf\001\002\000\004\060\uffd5\001\002\000" +
    "\006\056\271\060\uffd2\001\002\000\004\060\uffd3\001\002" +
    "\000\006\014\uffea\032\uffea\001\002\000\004\055\301\001" +
    "\002\000\010\014\uffe7\032\uffe7\063\261\001\002\000\006" +
    "\014\uffe8\032\uffe8\001\002\000\010\015\037\025\035\063" +
    "\270\001\002\000\004\056\303\001\002\000\010\014\uffe6" +
    "\032\uffe6\063\uffe6\001\002\000\020\021\uffcd\024\072\042" +
    "\062\043\067\044\077\045\070\063\074\001\002\000\004" +
    "\021\232\001\002\000\004\002\ufffe\001\002\000\012\014" +
    "\ufff9\032\ufff9\040\ufff9\041\ufff9\001\002\000\014\014\ufff6" +
    "\032\ufff6\040\ufff6\041\ufff6\063\261\001\002\000\004\047" +
    "\312\001\002\000\010\011\123\022\106\037\104\001\002" +
    "\000\004\056\314\001\002\000\014\014\ufff5\032\ufff5\040" +
    "\ufff5\041\ufff5\063\ufff5\001\002\000\012\014\ufff7\032\ufff7" +
    "\040\ufff7\041\ufff7\001\002\000\004\056\317\001\002\000" +
    "\014\014\ufffd\016\ufffd\032\ufffd\040\ufffd\041\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\002\003\076\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\010\012\001\001\000" +
    "\010\011\306\012\307\066\310\001\001\000\004\006\303" +
    "\001\001\000\004\016\013\001\001\000\004\013\041\001" +
    "\001\000\010\017\020\020\017\021\015\001\001\000\006" +
    "\022\026\023\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\021\021\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\027\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\274\015\276\066\275\001\001\000\020\025\043\026\047" +
    "\027\042\030\046\031\045\032\050\033\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\243\010\012\001\001\000\002\001\001\000\014\027" +
    "\241\030\242\031\045\032\050\033\051\001\001\000\006" +
    "\005\056\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\022\043\062\044\074\045\064\046\063\047\070\053\072" +
    "\054\065\073\075\001\001\000\016\050\234\051\117\052" +
    "\104\054\116\072\107\073\121\001\001\000\004\040\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\207\001\001\000\002" +
    "\001\001\000\016\050\175\051\117\052\104\054\116\072" +
    "\107\073\121\001\001\000\002\001\001\000\012\055\135" +
    "\061\136\074\137\075\141\001\001\000\016\045\172\046" +
    "\063\047\070\053\072\054\065\073\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\050\112\051\106\052" +
    "\104\054\101\064\100\072\107\073\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\050\163\051\117\052" +
    "\104\054\116\072\107\073\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\055\135\061\136" +
    "\074\137\075\141\001\001\000\002\001\001\000\016\050" +
    "\120\051\117\052\104\054\116\072\107\073\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\050\134\051\117\052\104\054\116\072" +
    "\107\073\121\001\001\000\016\050\133\051\117\052\104" +
    "\054\116\072\107\073\121\001\001\000\016\050\132\051" +
    "\117\052\104\054\116\072\107\073\121\001\001\000\016" +
    "\050\131\051\117\052\104\054\116\072\107\073\121\001" +
    "\001\000\016\050\130\051\117\052\104\054\116\072\107" +
    "\073\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\050" +
    "\155\051\117\052\104\054\116\056\154\072\107\073\121" +
    "\001\001\000\002\001\001\000\022\050\112\051\150\052" +
    "\104\054\116\061\146\062\147\072\107\073\151\001\001" +
    "\000\002\001\001\000\004\075\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\156\001\001\000\002\001\001" +
    "\000\016\050\160\051\117\052\104\054\116\072\107\073" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\170\051\117\052\104" +
    "\054\116\072\107\073\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\043\177\044\074\045" +
    "\064\046\063\047\070\053\072\054\065\073\075\001\001" +
    "\000\004\060\201\001\001\000\022\043\204\044\074\045" +
    "\064\046\063\047\070\053\072\054\065\073\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\216\063\215\073\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\230" +
    "\001\001\000\004\041\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\043\236\044\074\045\064" +
    "\046\063\047\070\053\072\054\065\073\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\244\001\001\000" +
    "\022\043\245\044\074\045\064\046\063\047\070\053\072" +
    "\054\065\073\075\001\001\000\004\007\246\001\001\000" +
    "\002\001\001\000\004\034\251\001\001\000\010\035\255" +
    "\037\252\042\254\001\001\000\002\001\001\000\004\036" +
    "\271\001\001\000\002\001\001\000\004\066\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\070\265\071\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\272\042\254\001\001\000\002\001\001\000\004\036" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\277\015\276\066\275\001\001\000" +
    "\002\001\001\000\006\070\301\071\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\043\304\044\074\045" +
    "\064\046\063\047\070\053\072\054\065\073\075\001\001" +
    "\000\004\007\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\314\012\307\066\310\001\001\000\002" +
    "\001\001\000\004\072\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // const_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // const_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // const_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // prim_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // prim_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prim_types",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // var_type ::= prim_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // var_type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ident_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ident_sub_list ::= ident_sub_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_sub_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ident_list ::= IDENTIFIER ident_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_sub_list ::= expr_sub_list COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sub_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_list ::= expr expr_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_logic ::= NOT expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_logic ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_logic ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_logic ::= expr NOT_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_arit ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_arit ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= error RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Esto es un error en exp..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= const_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr_logic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // writeln_paren ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // writeln_paren ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln_paren",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // writeint_params ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // writeint_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // writeint_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // writeint_params ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeint_params",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // writestring_params ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // writestring_params ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // writestring_params ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestring_params",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // proc_call_params ::= LEFT_PARENTHESIS expr_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_params",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // proc_call_expr ::= IDENTIFIER proc_call_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_expr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // proc_call_stmt ::= proc_call_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // proc_call_stmt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // property_access ::= DOT IDENTIFIER property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // property_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("property_access",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vector_index ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vector_index ::= expr_arit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vector_index ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vector_index ::= ident_plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_index",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vector ::= LEFT_BRACKET vector_index RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ident_plus_options ::= property_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ident_plus_options ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus_options",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ident_plus ::= IDENTIFIER ident_plus_options 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ident_plus ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_plus",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_stmt ::= WHILE expr DO stmt_spec END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_part ::= ELSE stmt_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_stmt ::= IF error THEN 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error en la expresión lógica de la sentencia condicional."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stmt ::= IF error END 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Se esperaba la palabra reservada THEN.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_stmt ::= IF expr THEN stmt_spec else_part END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= WRITELN writeln_paren SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= WRITEINT LEFT_PARENTHESIS writeint_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= WRITESTRING LEFT_PARENTHESIS writestring_params RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= ident_plus ASSIGNMENT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= proc_call_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt_spec ::= stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_spec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // by_reference ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // by_reference ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("by_reference",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param_block ::= by_reference ident_list COLON var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param_block_sub_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param_block_sub_list ::= SEMICOLON param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_sub_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param_block_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param_block_list ::= param_block param_block_sub_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_block_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subp_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subp_params ::= LEFT_PARENTHESIS param_block_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_params",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // func_return_values ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // func_return_values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return_values",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // func_return ::= RETURN func_return_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_return",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subp_header ::= PROCEDURE IDENTIFIER subp_params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_header",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_header ::= subp_header COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_header",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proc_header ::= subp_header SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_header",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func ::= func_header declaration_blocks_spec begin_spec stmt_spec func_return end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proc ::= proc_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subp_list ::= func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subp_list ::= proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subp_list ::= subp_list func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subp_list ::= subp_list proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subp_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subp_spec ::= subp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subp_spec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_block ::= ident_list COLON var_type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_list ::= var_block var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_spec ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // record_end ::= END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // record_var ::= IDENTIFIER COLON prim_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_var_list ::= record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // record_var_list ::= record_var_list record_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_var_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // record_header ::= IDENTIFIER EQUAL RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_header",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_type ::= record_header record_var_list record_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_list ::= record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_list ::= type_list record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_spec ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_block ::= ident_list EQUAL const_value SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= const_block const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_spec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_spec ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_spec ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_spec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // begin_spec ::= BEGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_blocks_spec ::= const_spec type_spec var_spec subp_spec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_blocks_spec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_header ::= MODULE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= module_header declaration_blocks_spec begin_spec stmt_spec end_spec 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden anadir mas acciones semanticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aun no se tendra implementada la generacion de codigo intermedio ni final.
  		// Para la entrega de Junio deberan descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

